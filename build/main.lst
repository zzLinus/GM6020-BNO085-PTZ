ARM GAS  /tmp/ccf61RgB.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.fputc,"ax",%progbits
  21              		.align	1
  22              		.global	fputc
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	fputc:
  28              	.LVL0:
  29              	.LFB136:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "can.h"
  23:Core/Src/main.c **** #include "i2c.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** #include "usb_device.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
ARM GAS  /tmp/ccf61RgB.s 			page 2


  30:Core/Src/main.c **** #include "bsp_can.h"
  31:Core/Src/main.c **** #include "pid.h"
  32:Core/Src/main.c **** #include <stdio.h>
  33:Core/Src/main.c **** #include <string.h>
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PD */
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE END PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/main.c **** void SystemClock_Config(void);
  59:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  60:Core/Src/main.c **** /* USER CODE END PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  63:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  64:Core/Src/main.c **** PID_TypeDef motor_pid[4]; //ï¿½Ù¶È»ï¿½ï¿½ï¿½ï¿½ï¿½
  65:Core/Src/main.c **** PID_TypeDef angle_pid[2]; //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** uint8_t ReceiveBuffer[6] = {0}; //IICï¿½ï¿½ï¿½Õ»ï¿½ï¿½ï¿½ï¿½ï¿½
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** PID_TypeDef abs_pid[2];           //ï¿½ï¿½ï¿½Ô½Ç¶È£ï¿½ï¿½ï¿½ï¿½È£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç£ï¿½
  70:Core/Src/main.c **** float ABS_Gimbal_angle[2] = {0};  //ï¿½ï¿½Ì¨ï¿½ï¿½ï¿½Ô½Ç¶ï¿½(ï¿½ï¿½ï¿½ï¿½) {yaw, pitch}, 0-8192 340
  71:Core/Src/main.c **** int16_t ABS_IMU_angle[2] = {0};   //ï¿½ï¿½Ò»ï¿½ï¿½Ö®ï¿½ï¿½ï¿½IMUï¿½Ç¶È£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
  72:Core/Src/main.c **** int16_t IMU_Angle_Raw[3] = {0};   //ï¿½ï¿½ï¿½Õµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å·ï¿½ï¿½ï¿½ï¿½
  73:Core/Src/main.c **** float IMU_Angle[3] = {0};         //×ªï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å·ï¿½ï¿½ï¿½ï¿½
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** int16_t Gimbal_angle[2] = {7500, 4800};   //ï¿½ï¿½Ì¨ï¿½Ç¶ï¿½ï¿½è¶¨ {yaw, pitch}ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** int current_limit = 2000; //ï¿½ï¿½ï¿½ï¿½
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** int i = 0;
  80:Core/Src/main.c **** int j = 0;
  81:Core/Src/main.c **** int current = 0;
  82:Core/Src/main.c **** int speed = 0;
  83:Core/Src/main.c **** int time = 0;
  84:Core/Src/main.c **** int speed_set = 0;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** void Abs_anglelop_PID_tuning(int motor_ID);
ARM GAS  /tmp/ccf61RgB.s 			page 3


  87:Core/Src/main.c **** void Rel_angleloop_PID_tuning(int motor_ID);
  88:Core/Src/main.c **** void speed_loop_PID_tuning(int motor_ID);
  89:Core/Src/main.c **** void Rel_angle_PID_test_loop(int motor_ID);
  90:Core/Src/main.c **** void Abs_angle_PID_test_loop(int motor_ID);
  91:Core/Src/main.c **** void Rel_angle_control_loop();
  92:Core/Src/main.c **** void Abs_angle_control_loop();
  93:Core/Src/main.c **** /* USER CODE END 0 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /**
  96:Core/Src/main.c ****   * @brief  The application entry point.
  97:Core/Src/main.c ****   * @retval int
  98:Core/Src/main.c ****   */
  99:Core/Src/main.c **** int main(void)
 100:Core/Src/main.c **** {
 101:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 102:Core/Src/main.c ****   /* USER CODE END 1 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:Core/Src/main.c ****   HAL_Init();
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* USER CODE END Init */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* Configure the system clock */
 114:Core/Src/main.c ****   SystemClock_Config();
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* USER CODE END SysInit */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Initialize all configured peripherals */
 121:Core/Src/main.c ****   MX_GPIO_Init();
 122:Core/Src/main.c ****   MX_CAN1_Init();
 123:Core/Src/main.c ****   MX_I2C2_Init();
 124:Core/Src/main.c ****   MX_USART1_UART_Init();
 125:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 126:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 127:Core/Src/main.c ****   
 128:Core/Src/main.c **** 	HAL_CAN_Start(&hcan1);
 129:Core/Src/main.c **** 	my_can_filter_init_recv_all(&hcan1);
 130:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // enable IT
 131:Core/Src/main.c **** 	
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE END 2 */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* Infinite loop */
 136:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   //YAWï¿½ï¿½PID
 139:Core/Src/main.c ****   pid_init(&motor_pid[0]); //ï¿½Ù¶È»ï¿½
 140:Core/Src/main.c ****   motor_pid[0].f_param_init(&motor_pid[0],PID_Speed,current_limit,5000,0,0,0,8000,61.4656753,0.6697
 141:Core/Src/main.c ****   pid_init(&angle_pid[0]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 142:Core/Src/main.c ****   angle_pid[0].f_param_init(&angle_pid[0],PID_Speed,300,300,0,0,4000,0,1.3713,0.00495369,94.8474*0)
 143:Core/Src/main.c ****   pid_init(&abs_pid[0]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È£ï¿½
ARM GAS  /tmp/ccf61RgB.s 			page 4


 144:Core/Src/main.c ****   abs_pid[0].f_param_init(&abs_pid[0],PID_Speed,300,300,0,0,4000,0,-0.9,-0.003,-3);
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   //Pitchï¿½ï¿½PID
 147:Core/Src/main.c ****   pid_init(&motor_pid[1]); //ï¿½Ù¶È»ï¿½
 148:Core/Src/main.c ****   motor_pid[1].f_param_init(&motor_pid[1],PID_Speed,current_limit,5000,0,0,0,8000,4.01239768,3.0348
 149:Core/Src/main.c ****   pid_init(&angle_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 150:Core/Src/main.c ****   angle_pid[1].f_param_init(&angle_pid[1],PID_Speed,500,500,0,0,4000,0,1.27137,0.01084,27.877753*0.
 151:Core/Src/main.c ****   pid_init(&abs_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È£ï¿½
 152:Core/Src/main.c ****   abs_pid[1].f_param_init(&abs_pid[1],PID_Speed,300,300,0,0,4000,0,0.5,0,10);
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   printf("--------------init--------------\n");
 157:Core/Src/main.c ****   HAL_I2C_Slave_Receive_IT(&hi2c2,ReceiveBuffer,sizeof(ReceiveBuffer));
 158:Core/Src/main.c ****   while (1)
 159:Core/Src/main.c ****   {
 160:Core/Src/main.c ****     /* USER CODE END WHILE */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 163:Core/Src/main.c ****   
 164:Core/Src/main.c ****     switch (ABS_ANGLE_STABLE_MODE)
 165:Core/Src/main.c ****     {
 166:Core/Src/main.c ****     case SPEED_PID_TUNING: 
 167:Core/Src/main.c ****         speed_loop_PID_tuning(0);
 168:Core/Src/main.c ****       break;
 169:Core/Src/main.c ****     
 170:Core/Src/main.c ****     case ABS_ANGLE_PID_TUNING: 
 171:Core/Src/main.c ****         Abs_anglelop_PID_tuning(0);
 172:Core/Src/main.c ****       break;
 173:Core/Src/main.c ****     
 174:Core/Src/main.c ****     case REL_ANGLE_PID_TUNING:
 175:Core/Src/main.c ****         Rel_angleloop_PID_tuning(0);
 176:Core/Src/main.c ****       break;
 177:Core/Src/main.c ****     
 178:Core/Src/main.c ****     case ABS_ANGLE_PID_TEST:
 179:Core/Src/main.c ****         Abs_angle_PID_test_loop(0);
 180:Core/Src/main.c ****       break;
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****     case REL_ANGLE_PID_TEST:
 183:Core/Src/main.c ****         Rel_angle_PID_test_loop(0);
 184:Core/Src/main.c ****       break;
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****     case ABS_ANGLE_STABLE_MODE:
 187:Core/Src/main.c ****         Abs_angle_control_loop();
 188:Core/Src/main.c ****       break;
 189:Core/Src/main.c ****     
 190:Core/Src/main.c ****     case REL_ANGLE_STABLE_MODE:
 191:Core/Src/main.c ****         Rel_angle_control_loop();
 192:Core/Src/main.c ****       break;
 193:Core/Src/main.c ****     
 194:Core/Src/main.c ****     }
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****     /*Debug*/
 197:Core/Src/main.c ****     if(false)
 198:Core/Src/main.c ****     {
 199:Core/Src/main.c ****     HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 200:Core/Src/main.c ****     HAL_Delay(100);
ARM GAS  /tmp/ccf61RgB.s 			page 5


 201:Core/Src/main.c ****     }
 202:Core/Src/main.c ****     i++;
 203:Core/Src/main.c ****     j++;
 204:Core/Src/main.c ****   }
 205:Core/Src/main.c ****   /* USER CODE END 3 */
 206:Core/Src/main.c **** }
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** /**
 209:Core/Src/main.c ****   * @brief System Clock Configuration
 210:Core/Src/main.c ****   * @retval None
 211:Core/Src/main.c ****   */
 212:Core/Src/main.c **** void SystemClock_Config(void)
 213:Core/Src/main.c **** {
 214:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 215:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 218:Core/Src/main.c ****   */
 219:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 220:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 223:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 226:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 233:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 234:Core/Src/main.c ****   {
 235:Core/Src/main.c ****     Error_Handler();
 236:Core/Src/main.c ****   }
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 239:Core/Src/main.c ****   */
 240:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 241:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 242:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 243:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 248:Core/Src/main.c ****   {
 249:Core/Src/main.c ****     Error_Handler();
 250:Core/Src/main.c ****   }
 251:Core/Src/main.c **** }
 252:Core/Src/main.c **** 
 253:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c **** int fputc(int ch, FILE *f)
 256:Core/Src/main.c **** {
  30              		.loc 1 256 1 view -0
ARM GAS  /tmp/ccf61RgB.s 			page 6


  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 256 1 is_stmt 0 view .LVU1
  35 0000 00B5     		push	{lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 14, -4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 16
  42 0004 0190     		str	r0, [sp, #4]
 257:Core/Src/main.c ****   HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xffff);
  43              		.loc 1 257 3 is_stmt 1 view .LVU2
  44 0006 4FF6FF73 		movw	r3, #65535
  45 000a 0122     		movs	r2, #1
  46 000c 01A9     		add	r1, sp, #4
  47              	.LVL1:
  48              		.loc 1 257 3 is_stmt 0 view .LVU3
  49 000e 0348     		ldr	r0, .L3
  50              	.LVL2:
  51              		.loc 1 257 3 view .LVU4
  52 0010 FFF7FEFF 		bl	HAL_UART_Transmit
  53              	.LVL3:
 258:Core/Src/main.c ****   return ch;
  54              		.loc 1 258 3 is_stmt 1 view .LVU5
 259:Core/Src/main.c **** }
  55              		.loc 1 259 1 is_stmt 0 view .LVU6
  56 0014 0198     		ldr	r0, [sp, #4]
  57 0016 03B0     		add	sp, sp, #12
  58              	.LCFI2:
  59              		.cfi_def_cfa_offset 4
  60              		@ sp needed
  61 0018 5DF804FB 		ldr	pc, [sp], #4
  62              	.L4:
  63              		.align	2
  64              	.L3:
  65 001c 00000000 		.word	huart1
  66              		.cfi_endproc
  67              	.LFE136:
  69              		.section	.text.fgetc,"ax",%progbits
  70              		.align	1
  71              		.global	fgetc
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  76              	fgetc:
  77              	.LVL4:
  78              	.LFB137:
 260:Core/Src/main.c **** int fgetc(FILE *f)
 261:Core/Src/main.c **** {
  79              		.loc 1 261 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 8
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		.loc 1 261 1 is_stmt 0 view .LVU8
  84 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccf61RgB.s 			page 7


  85              	.LCFI3:
  86              		.cfi_def_cfa_offset 4
  87              		.cfi_offset 14, -4
  88 0002 83B0     		sub	sp, sp, #12
  89              	.LCFI4:
  90              		.cfi_def_cfa_offset 16
 262:Core/Src/main.c ****   uint8_t ch = 0;
  91              		.loc 1 262 3 is_stmt 1 view .LVU9
  92              		.loc 1 262 11 is_stmt 0 view .LVU10
  93 0004 0023     		movs	r3, #0
  94 0006 8DF80730 		strb	r3, [sp, #7]
 263:Core/Src/main.c ****   HAL_UART_Receive(&huart1, &ch, 1, 0xffff);
  95              		.loc 1 263 3 is_stmt 1 view .LVU11
  96 000a 4FF6FF73 		movw	r3, #65535
  97 000e 0122     		movs	r2, #1
  98 0010 0DF10701 		add	r1, sp, #7
  99 0014 0348     		ldr	r0, .L7
 100              	.LVL5:
 101              		.loc 1 263 3 is_stmt 0 view .LVU12
 102 0016 FFF7FEFF 		bl	HAL_UART_Receive
 103              	.LVL6:
 264:Core/Src/main.c ****   return ch;
 104              		.loc 1 264 3 is_stmt 1 view .LVU13
 265:Core/Src/main.c **** }
 105              		.loc 1 265 1 is_stmt 0 view .LVU14
 106 001a 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 107 001e 03B0     		add	sp, sp, #12
 108              	.LCFI5:
 109              		.cfi_def_cfa_offset 4
 110              		@ sp needed
 111 0020 5DF804FB 		ldr	pc, [sp], #4
 112              	.L8:
 113              		.align	2
 114              	.L7:
 115 0024 00000000 		.word	huart1
 116              		.cfi_endproc
 117              	.LFE137:
 119              		.global	__aeabi_f2d
 120              		.section	.rodata.HAL_I2C_SlaveRxCpltCallback.str1.4,"aMS",%progbits,1
 121              		.align	2
 122              	.LC0:
 123 0000 25662C20 		.ascii	"%f, %f, %f\012\000"
 123      25662C20 
 123      25660A00 
 124              		.section	.text.HAL_I2C_SlaveRxCpltCallback,"ax",%progbits
 125              		.align	1
 126              		.global	HAL_I2C_SlaveRxCpltCallback
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	HAL_I2C_SlaveRxCpltCallback:
 132              	.LVL7:
 133              	.LFB138:
 266:Core/Src/main.c **** 
 267:Core/Src/main.c **** void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 268:Core/Src/main.c **** {
 134              		.loc 1 268 1 is_stmt 1 view -0
ARM GAS  /tmp/ccf61RgB.s 			page 8


 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 8
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		.loc 1 268 1 is_stmt 0 view .LVU16
 139 0000 30B5     		push	{r4, r5, lr}
 140              	.LCFI6:
 141              		.cfi_def_cfa_offset 12
 142              		.cfi_offset 4, -12
 143              		.cfi_offset 5, -8
 144              		.cfi_offset 14, -4
 145 0002 2DED028B 		vpush.64	{d8}
 146              	.LCFI7:
 147              		.cfi_def_cfa_offset 20
 148              		.cfi_offset 80, -20
 149              		.cfi_offset 81, -16
 150 0006 87B0     		sub	sp, sp, #28
 151              	.LCFI8:
 152              		.cfi_def_cfa_offset 48
 269:Core/Src/main.c ****   //printf("data1 = %d\n", ReceiveBuffer[1]);
 270:Core/Src/main.c ****   uint8_t IMU_data[6] = {0};
 153              		.loc 1 270 3 is_stmt 1 view .LVU17
 154              		.loc 1 270 11 is_stmt 0 view .LVU18
 155 0008 0023     		movs	r3, #0
 156 000a 0493     		str	r3, [sp, #16]
 157 000c ADF81430 		strh	r3, [sp, #20]	@ movhi
 271:Core/Src/main.c ****   for(int i=0; i<6; i++)
 158              		.loc 1 271 3 is_stmt 1 view .LVU19
 159              	.LBB4:
 160              		.loc 1 271 7 view .LVU20
 161              	.LVL8:
 162              		.loc 1 271 3 is_stmt 0 view .LVU21
 163 0010 07E0     		b	.L10
 164              	.LVL9:
 165              	.L11:
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     IMU_data[i] = ReceiveBuffer[i];
 166              		.loc 1 273 5 is_stmt 1 view .LVU22
 167              		.loc 1 273 32 is_stmt 0 view .LVU23
 168 0012 304A     		ldr	r2, .L13
 169 0014 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 170              		.loc 1 273 17 view .LVU24
 171 0016 03F11802 		add	r2, r3, #24
 172 001a 6A44     		add	r2, sp, r2
 173 001c 02F8081C 		strb	r1, [r2, #-8]
 271:Core/Src/main.c ****   for(int i=0; i<6; i++)
 174              		.loc 1 271 22 is_stmt 1 discriminator 3 view .LVU25
 175 0020 0133     		adds	r3, r3, #1
 176              	.LVL10:
 177              	.L10:
 271:Core/Src/main.c ****   for(int i=0; i<6; i++)
 178              		.loc 1 271 17 discriminator 1 view .LVU26
 179 0022 052B     		cmp	r3, #5
 180 0024 F5DD     		ble	.L11
 181              	.LBE4:
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c ****   IMU_Angle_Raw[0] = (int16_t)(IMU_data[0]<<8 | IMU_data[1]);
 182              		.loc 1 275 3 view .LVU27
ARM GAS  /tmp/ccf61RgB.s 			page 9


 183              		.loc 1 275 40 is_stmt 0 view .LVU28
 184 0026 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 185              	.LVL11:
 186              		.loc 1 275 57 view .LVU29
 187 002a 9DF81110 		ldrb	r1, [sp, #17]	@ zero_extendqisi2
 188              		.loc 1 275 22 view .LVU30
 189 002e 41EA0321 		orr	r1, r1, r3, lsl #8
 190 0032 09B2     		sxth	r1, r1
 191              		.loc 1 275 20 view .LVU31
 192 0034 2848     		ldr	r0, .L13+4
 193              	.LVL12:
 194              		.loc 1 275 20 view .LVU32
 195 0036 0180     		strh	r1, [r0]	@ movhi
 276:Core/Src/main.c ****   IMU_Angle_Raw[1] = (int16_t)(IMU_data[2]<<8 | IMU_data[3]);
 196              		.loc 1 276 3 is_stmt 1 view .LVU33
 197              		.loc 1 276 40 is_stmt 0 view .LVU34
 198 0038 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 199              		.loc 1 276 57 view .LVU35
 200 003c 9DF81320 		ldrb	r2, [sp, #19]	@ zero_extendqisi2
 201              		.loc 1 276 22 view .LVU36
 202 0040 42EA0322 		orr	r2, r2, r3, lsl #8
 203 0044 12B2     		sxth	r2, r2
 204              		.loc 1 276 20 view .LVU37
 205 0046 4280     		strh	r2, [r0, #2]	@ movhi
 277:Core/Src/main.c ****   IMU_Angle_Raw[2] = (int16_t)(IMU_data[4]<<8 | IMU_data[5]);
 206              		.loc 1 277 3 is_stmt 1 view .LVU38
 207              		.loc 1 277 40 is_stmt 0 view .LVU39
 208 0048 9DF81440 		ldrb	r4, [sp, #20]	@ zero_extendqisi2
 209              		.loc 1 277 57 view .LVU40
 210 004c 9DF81530 		ldrb	r3, [sp, #21]	@ zero_extendqisi2
 211              		.loc 1 277 22 view .LVU41
 212 0050 43EA0423 		orr	r3, r3, r4, lsl #8
 213 0054 1BB2     		sxth	r3, r3
 214              		.loc 1 277 20 view .LVU42
 215 0056 8380     		strh	r3, [r0, #4]	@ movhi
 278:Core/Src/main.c ****   IMU_Angle[0] = (float)IMU_Angle_Raw[0]/100;
 216              		.loc 1 278 3 is_stmt 1 view .LVU43
 217              		.loc 1 278 18 is_stmt 0 view .LVU44
 218 0058 07EE901A 		vmov	s15, r1	@ int
 219 005c F8EEE77A 		vcvt.f32.s32	s15, s15
 220              		.loc 1 278 41 view .LVU45
 221 0060 DFED1E6A 		vldr.32	s13, .L13+8
 222 0064 87EEA67A 		vdiv.f32	s14, s15, s13
 223              		.loc 1 278 16 view .LVU46
 224 0068 1D49     		ldr	r1, .L13+12
 225 006a 81ED007A 		vstr.32	s14, [r1]
 279:Core/Src/main.c ****   IMU_Angle[1] = (float)IMU_Angle_Raw[1]/100;
 226              		.loc 1 279 3 is_stmt 1 view .LVU47
 227              		.loc 1 279 18 is_stmt 0 view .LVU48
 228 006e 07EE902A 		vmov	s15, r2	@ int
 229 0072 F8EEE77A 		vcvt.f32.s32	s15, s15
 230              		.loc 1 279 41 view .LVU49
 231 0076 87EEA68A 		vdiv.f32	s16, s15, s13
 232              		.loc 1 279 16 view .LVU50
 233 007a 81ED018A 		vstr.32	s16, [r1, #4]
 280:Core/Src/main.c ****   IMU_Angle[2] = (float)IMU_Angle_Raw[2]/10;
 234              		.loc 1 280 3 is_stmt 1 view .LVU51
ARM GAS  /tmp/ccf61RgB.s 			page 10


 235              		.loc 1 280 18 is_stmt 0 view .LVU52
 236 007e 07EE903A 		vmov	s15, r3	@ int
 237 0082 F8EEE77A 		vcvt.f32.s32	s15, s15
 238              		.loc 1 280 41 view .LVU53
 239 0086 F2EE046A 		vmov.f32	s13, #1.0e+1
 240 008a C7EEA68A 		vdiv.f32	s17, s15, s13
 241              		.loc 1 280 16 view .LVU54
 242 008e C1ED028A 		vstr.32	s17, [r1, #8]
 281:Core/Src/main.c **** //  printf("%f, %d, %d, \n", 
 282:Core/Src/main.c **** //        (int16_t)(IMU_data[0]<<8 | IMU_data[1])/100, 
 283:Core/Src/main.c **** //        (int16_t)(IMU_data[2]<<8 | IMU_data[3]), 
 284:Core/Src/main.c **** //        (int16_t)(IMU_data[4]<<8 | IMU_data[5])*10);
 285:Core/Src/main.c ****   printf("%f, %f, %f\n", IMU_Angle[0], IMU_Angle[1], IMU_Angle[2]);
 243              		.loc 1 285 3 is_stmt 1 view .LVU55
 244 0092 17EE100A 		vmov	r0, s14
 245 0096 FFF7FEFF 		bl	__aeabi_f2d
 246              	.LVL13:
 247 009a 0446     		mov	r4, r0
 248 009c 0D46     		mov	r5, r1
 249 009e 18EE900A 		vmov	r0, s17
 250 00a2 FFF7FEFF 		bl	__aeabi_f2d
 251              	.LVL14:
 252 00a6 CDE90201 		strd	r0, [sp, #8]
 253 00aa 18EE100A 		vmov	r0, s16
 254 00ae FFF7FEFF 		bl	__aeabi_f2d
 255              	.LVL15:
 256 00b2 CDE90001 		strd	r0, [sp]
 257 00b6 2246     		mov	r2, r4
 258 00b8 2B46     		mov	r3, r5
 259 00ba 0A48     		ldr	r0, .L13+16
 260 00bc FFF7FEFF 		bl	printf
 261              	.LVL16:
 286:Core/Src/main.c ****   HAL_I2C_Slave_Receive_IT(&hi2c2,ReceiveBuffer,sizeof(ReceiveBuffer));
 262              		.loc 1 286 3 view .LVU56
 263 00c0 0622     		movs	r2, #6
 264 00c2 0449     		ldr	r1, .L13
 265 00c4 0848     		ldr	r0, .L13+20
 266 00c6 FFF7FEFF 		bl	HAL_I2C_Slave_Receive_IT
 267              	.LVL17:
 287:Core/Src/main.c **** }
 268              		.loc 1 287 1 is_stmt 0 view .LVU57
 269 00ca 07B0     		add	sp, sp, #28
 270              	.LCFI9:
 271              		.cfi_def_cfa_offset 20
 272              		@ sp needed
 273 00cc BDEC028B 		vldm	sp!, {d8}
 274              	.LCFI10:
 275              		.cfi_restore 80
 276              		.cfi_restore 81
 277              		.cfi_def_cfa_offset 12
 278 00d0 30BD     		pop	{r4, r5, pc}
 279              	.L14:
 280 00d2 00BF     		.align	2
 281              	.L13:
 282 00d4 00000000 		.word	ReceiveBuffer
 283 00d8 00000000 		.word	IMU_Angle_Raw
 284 00dc 0000C842 		.word	1120403456
ARM GAS  /tmp/ccf61RgB.s 			page 11


 285 00e0 00000000 		.word	IMU_Angle
 286 00e4 00000000 		.word	.LC0
 287 00e8 00000000 		.word	hi2c2
 288              		.cfi_endproc
 289              	.LFE138:
 291              		.global	__aeabi_dadd
 292              		.global	__aeabi_dmul
 293              		.global	__aeabi_ddiv
 294              		.global	__aeabi_d2iz
 295              		.section	.rodata.Abs_angle_control_loop.str1.4,"aMS",%progbits,1
 296              		.align	2
 297              	.LC1:
 298 0000 25642C20 		.ascii	"%d, %d\012\000"
 298      25640A00 
 299              		.section	.text.Abs_angle_control_loop,"ax",%progbits
 300              		.align	1
 301              		.global	Abs_angle_control_loop
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 306              	Abs_angle_control_loop:
 307              	.LFB139:
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã¿ï¿½ï¿½ï¿½
 290:Core/Src/main.c **** void Abs_angle_control_loop()
 291:Core/Src/main.c **** {
 308              		.loc 1 291 1 is_stmt 1 view -0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 313              	.LCFI11:
 314              		.cfi_def_cfa_offset 24
 315              		.cfi_offset 4, -24
 316              		.cfi_offset 5, -20
 317              		.cfi_offset 6, -16
 318              		.cfi_offset 7, -12
 319              		.cfi_offset 8, -8
 320              		.cfi_offset 14, -4
 321 0004 82B0     		sub	sp, sp, #8
 322              	.LCFI12:
 323              		.cfi_def_cfa_offset 32
 292:Core/Src/main.c ****   /*ï¿½ï¿½ï¿½È¿ï¿½ï¿½ï¿½*/
 293:Core/Src/main.c ****   //IMUï¿½ï¿½Ò»ï¿½ï¿½
 294:Core/Src/main.c ****   ABS_IMU_angle[0] = (int)((IMU_Angle[2]*8192)/360); //yaw
 324              		.loc 1 294 3 view .LVU59
 325              		.loc 1 294 38 is_stmt 0 view .LVU60
 326 0006 3F4B     		ldr	r3, .L17
 327 0008 93ED027A 		vldr.32	s14, [r3, #8]
 328              		.loc 1 294 41 view .LVU61
 329 000c DFED3E7A 		vldr.32	s15, .L17+4
 330 0010 27EE277A 		vmul.f32	s14, s14, s15
 331              		.loc 1 294 47 view .LVU62
 332 0014 DFED3D6A 		vldr.32	s13, .L17+8
 333 0018 C7EE267A 		vdiv.f32	s15, s14, s13
 334              		.loc 1 294 22 view .LVU63
 335 001c FDEEE77A 		vcvt.s32.f32	s15, s15
ARM GAS  /tmp/ccf61RgB.s 			page 12


 336              		.loc 1 294 20 view .LVU64
 337 0020 17EE902A 		vmov	r2, s15	@ int
 338 0024 14B2     		sxth	r4, r2
 339 0026 3A4E     		ldr	r6, .L17+12
 340 0028 3480     		strh	r4, [r6]	@ movhi
 295:Core/Src/main.c ****   ABS_IMU_angle[1] = (int)(((IMU_Angle[0]+180.0)*8192)/360); //pitch
 341              		.loc 1 295 3 is_stmt 1 view .LVU65
 342              		.loc 1 295 39 is_stmt 0 view .LVU66
 343 002a 1868     		ldr	r0, [r3]	@ float
 344 002c FFF7FEFF 		bl	__aeabi_f2d
 345              	.LVL18:
 346              		.loc 1 295 42 view .LVU67
 347 0030 0022     		movs	r2, #0
 348 0032 384B     		ldr	r3, .L17+16
 349 0034 FFF7FEFF 		bl	__aeabi_dadd
 350              	.LVL19:
 351              		.loc 1 295 49 view .LVU68
 352 0038 0022     		movs	r2, #0
 353 003a 374B     		ldr	r3, .L17+20
 354 003c FFF7FEFF 		bl	__aeabi_dmul
 355              	.LVL20:
 356              		.loc 1 295 55 view .LVU69
 357 0040 0022     		movs	r2, #0
 358 0042 364B     		ldr	r3, .L17+24
 359 0044 FFF7FEFF 		bl	__aeabi_ddiv
 360              	.LVL21:
 361              		.loc 1 295 22 view .LVU70
 362 0048 FFF7FEFF 		bl	__aeabi_d2iz
 363              	.LVL22:
 364              		.loc 1 295 20 view .LVU71
 365 004c 7080     		strh	r0, [r6, #2]	@ movhi
 296:Core/Src/main.c ****   //YAWï¿½ï¿½ï¿½ï¿½
 297:Core/Src/main.c ****   int motor_ID = 0;
 366              		.loc 1 297 3 is_stmt 1 view .LVU72
 367              	.LVL23:
 298:Core/Src/main.c ****   abs_pid[motor_ID].target = ABS_Gimbal_angle[0];
 368              		.loc 1 298 3 view .LVU73
 369              		.loc 1 298 46 is_stmt 0 view .LVU74
 370 004e DFF8E480 		ldr	r8, .L17+48
 371 0052 D8F80030 		ldr	r3, [r8]	@ float
 372              		.loc 1 298 28 view .LVU75
 373 0056 324D     		ldr	r5, .L17+28
 374 0058 6B60     		str	r3, [r5, #4]	@ float
 299:Core/Src/main.c ****   abs_pid[motor_ID].f_cal_pid(&abs_pid[motor_ID], ABS_IMU_angle[motor_ID], 8192);
 375              		.loc 1 299 3 is_stmt 1 view .LVU76
 376              		.loc 1 299 20 is_stmt 0 view .LVU77
 377 005a 2B6E     		ldr	r3, [r5, #96]
 378              		.loc 1 299 3 view .LVU78
 379 005c 4FF40051 		mov	r1, #8192
 380 0060 07EE904A 		vmov	s15, r4	@ int
 381 0064 B8EEE70A 		vcvt.f32.s32	s0, s15
 382 0068 2846     		mov	r0, r5
 383 006a 9847     		blx	r3
 384              	.LVL24:
 300:Core/Src/main.c ****   motor_pid[motor_ID].target = abs_pid[motor_ID].output; 																							
 385              		.loc 1 300 3 is_stmt 1 view .LVU79
 386              		.loc 1 300 49 is_stmt 0 view .LVU80
ARM GAS  /tmp/ccf61RgB.s 			page 13


 387 006c 2B6B     		ldr	r3, [r5, #48]	@ float
 388              		.loc 1 300 30 view .LVU81
 389 006e 2D4C     		ldr	r4, .L17+32
 390 0070 6360     		str	r3, [r4, #4]	@ float
 301:Core/Src/main.c ****   motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID],moto_chassis[motor_ID].speed_rpm, 0);
 391              		.loc 1 301 3 is_stmt 1 view .LVU82
 392              		.loc 1 301 22 is_stmt 0 view .LVU83
 393 0072 236E     		ldr	r3, [r4, #96]
 394              		.loc 1 301 76 view .LVU84
 395 0074 2C4F     		ldr	r7, .L17+36
 396 0076 B7F90020 		ldrsh	r2, [r7]
 397 007a 00EE102A 		vmov	s0, r2	@ int
 398              		.loc 1 301 3 view .LVU85
 399 007e 0021     		movs	r1, #0
 400 0080 B8EEC00A 		vcvt.f32.s32	s0, s0
 401 0084 2046     		mov	r0, r4
 402 0086 9847     		blx	r3
 403              	.LVL25:
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   //PITCHï¿½ï¿½ï¿½ï¿½
 304:Core/Src/main.c ****   motor_ID = 1;
 404              		.loc 1 304 3 is_stmt 1 view .LVU86
 305:Core/Src/main.c ****   abs_pid[motor_ID].target = ABS_Gimbal_angle[1];
 405              		.loc 1 305 3 view .LVU87
 406              		.loc 1 305 46 is_stmt 0 view .LVU88
 407 0088 D8F80430 		ldr	r3, [r8, #4]	@ float
 408              		.loc 1 305 28 view .LVU89
 409 008c AB66     		str	r3, [r5, #104]	@ float
 306:Core/Src/main.c ****   abs_pid[motor_ID].f_cal_pid(&abs_pid[motor_ID], ABS_IMU_angle[motor_ID], 8192);
 410              		.loc 1 306 3 is_stmt 1 view .LVU90
 411              		.loc 1 306 20 is_stmt 0 view .LVU91
 412 008e D5F8C430 		ldr	r3, [r5, #196]
 413              		.loc 1 306 64 view .LVU92
 414 0092 B6F90220 		ldrsh	r2, [r6, #2]
 415 0096 00EE102A 		vmov	s0, r2	@ int
 416              		.loc 1 306 3 view .LVU93
 417 009a 4FF40051 		mov	r1, #8192
 418 009e B8EEC00A 		vcvt.f32.s32	s0, s0
 419 00a2 05F16400 		add	r0, r5, #100
 420 00a6 9847     		blx	r3
 421              	.LVL26:
 307:Core/Src/main.c ****   motor_pid[motor_ID].target = abs_pid[motor_ID].output; 																							
 422              		.loc 1 307 3 is_stmt 1 view .LVU94
 423              		.loc 1 307 49 is_stmt 0 view .LVU95
 424 00a8 D5F89430 		ldr	r3, [r5, #148]	@ float
 425              		.loc 1 307 30 view .LVU96
 426 00ac A366     		str	r3, [r4, #104]	@ float
 308:Core/Src/main.c ****   motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID],moto_chassis[motor_ID].speed_rpm, 0);
 427              		.loc 1 308 3 is_stmt 1 view .LVU97
 428              		.loc 1 308 22 is_stmt 0 view .LVU98
 429 00ae D4F8C430 		ldr	r3, [r4, #196]
 430              		.loc 1 308 76 view .LVU99
 431 00b2 B7F93020 		ldrsh	r2, [r7, #48]
 432 00b6 00EE102A 		vmov	s0, r2	@ int
 433              		.loc 1 308 3 view .LVU100
 434 00ba 0021     		movs	r1, #0
 435 00bc B8EEC00A 		vcvt.f32.s32	s0, s0
ARM GAS  /tmp/ccf61RgB.s 			page 14


 436 00c0 04F16400 		add	r0, r4, #100
 437 00c4 9847     		blx	r3
 438              	.LVL27:
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   set_moto_current(&hcan1, motor_pid[0].output, motor_pid[1].output, 0, 0);
 439              		.loc 1 311 3 is_stmt 1 view .LVU101
 440              		.loc 1 311 40 is_stmt 0 view .LVU102
 441 00c6 D4ED0C7A 		vldr.32	s15, [r4, #48]
 442              		.loc 1 311 61 view .LVU103
 443 00ca 94ED257A 		vldr.32	s14, [r4, #148]
 444              		.loc 1 311 3 view .LVU104
 445 00ce BDEEC77A 		vcvt.s32.f32	s14, s14
 446 00d2 FDEEE77A 		vcvt.s32.f32	s15, s15
 447 00d6 0023     		movs	r3, #0
 448 00d8 0093     		str	r3, [sp]
 449 00da 17EE102A 		vmov	r2, s14	@ int
 450 00de 12B2     		sxth	r2, r2
 451 00e0 17EE901A 		vmov	r1, s15	@ int
 452 00e4 09B2     		sxth	r1, r1
 453 00e6 1148     		ldr	r0, .L17+40
 454 00e8 FFF7FEFF 		bl	set_moto_current
 455              	.LVL28:
 312:Core/Src/main.c ****   printf("%d, %d\n", moto_chassis[motor_ID].angle, ABS_IMU_angle[motor_ID]);
 456              		.loc 1 312 3 is_stmt 1 view .LVU105
 457 00ec B6F90220 		ldrsh	r2, [r6, #2]
 458 00f0 B98F     		ldrh	r1, [r7, #60]
 459 00f2 0F48     		ldr	r0, .L17+44
 460 00f4 FFF7FEFF 		bl	printf
 461              	.LVL29:
 313:Core/Src/main.c ****   HAL_Delay(1);
 462              		.loc 1 313 3 view .LVU106
 463 00f8 0120     		movs	r0, #1
 464 00fa FFF7FEFF 		bl	HAL_Delay
 465              	.LVL30:
 314:Core/Src/main.c **** }
 466              		.loc 1 314 1 is_stmt 0 view .LVU107
 467 00fe 02B0     		add	sp, sp, #8
 468              	.LCFI13:
 469              		.cfi_def_cfa_offset 24
 470              		@ sp needed
 471 0100 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 472              	.L18:
 473              		.align	2
 474              	.L17:
 475 0104 00000000 		.word	IMU_Angle
 476 0108 00000046 		.word	1174405120
 477 010c 0000B443 		.word	1135869952
 478 0110 00000000 		.word	ABS_IMU_angle
 479 0114 00806640 		.word	1080459264
 480 0118 0000C040 		.word	1086324736
 481 011c 00807640 		.word	1081507840
 482 0120 00000000 		.word	abs_pid
 483 0124 00000000 		.word	motor_pid
 484 0128 00000000 		.word	moto_chassis
 485 012c 00000000 		.word	hcan1
 486 0130 00000000 		.word	.LC1
ARM GAS  /tmp/ccf61RgB.s 			page 15


 487 0134 00000000 		.word	ABS_Gimbal_angle
 488              		.cfi_endproc
 489              	.LFE139:
 491              		.section	.rodata.Rel_angle_control_loop.str1.4,"aMS",%progbits,1
 492              		.align	2
 493              	.LC2:
 494 0000 25660A00 		.ascii	"%f\012\000"
 495              		.section	.text.Rel_angle_control_loop,"ax",%progbits
 496              		.align	1
 497              		.global	Rel_angle_control_loop
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 502              	Rel_angle_control_loop:
 503              	.LFB140:
 315:Core/Src/main.c **** 
 316:Core/Src/main.c **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã¿ï¿½ï¿½ï¿½
 317:Core/Src/main.c **** void Rel_angle_control_loop()
 318:Core/Src/main.c **** {
 504              		.loc 1 318 1 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 509              	.LCFI14:
 510              		.cfi_def_cfa_offset 20
 511              		.cfi_offset 4, -20
 512              		.cfi_offset 5, -16
 513              		.cfi_offset 6, -12
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 83B0     		sub	sp, sp, #12
 517              	.LCFI15:
 518              		.cfi_def_cfa_offset 32
 319:Core/Src/main.c ****     i++;
 519              		.loc 1 319 5 view .LVU109
 520              		.loc 1 319 6 is_stmt 0 view .LVU110
 521 0004 4C4A     		ldr	r2, .L23
 522 0006 1368     		ldr	r3, [r2]
 523 0008 0133     		adds	r3, r3, #1
 524 000a 1360     		str	r3, [r2]
 320:Core/Src/main.c ****   /*ï¿½ï¿½ï¿½È¼ï¿½ï¿½ï¿½*/
 321:Core/Src/main.c ****   //IMUï¿½ï¿½Ò»ï¿½ï¿½
 322:Core/Src/main.c ****   ABS_IMU_angle[0] = (int)(IMU_Angle[2]*(8192/360)); //yaw
 525              		.loc 1 322 3 is_stmt 1 view .LVU111
 526              		.loc 1 322 37 is_stmt 0 view .LVU112
 527 000c 4B4B     		ldr	r3, .L23+4
 528 000e D3ED027A 		vldr.32	s15, [r3, #8]
 529              		.loc 1 322 40 view .LVU113
 530 0012 B3EE067A 		vmov.f32	s14, #2.2e+1
 531 0016 67EE877A 		vmul.f32	s15, s15, s14
 532              		.loc 1 322 22 view .LVU114
 533 001a FDEEE77A 		vcvt.s32.f32	s15, s15
 534              		.loc 1 322 20 view .LVU115
 535 001e 484C     		ldr	r4, .L23+8
 536 0020 17EE902A 		vmov	r2, s15	@ int
 537 0024 2280     		strh	r2, [r4]	@ movhi
ARM GAS  /tmp/ccf61RgB.s 			page 16


 323:Core/Src/main.c ****   ABS_IMU_angle[1] = (int)((IMU_Angle[0]+180.0)*(8192/360)); //pitch
 538              		.loc 1 323 3 is_stmt 1 view .LVU116
 539              		.loc 1 323 38 is_stmt 0 view .LVU117
 540 0026 1868     		ldr	r0, [r3]	@ float
 541 0028 FFF7FEFF 		bl	__aeabi_f2d
 542              	.LVL31:
 543              		.loc 1 323 41 view .LVU118
 544 002c 0022     		movs	r2, #0
 545 002e 454B     		ldr	r3, .L23+12
 546 0030 FFF7FEFF 		bl	__aeabi_dadd
 547              	.LVL32:
 548              		.loc 1 323 48 view .LVU119
 549 0034 0022     		movs	r2, #0
 550 0036 444B     		ldr	r3, .L23+16
 551 0038 FFF7FEFF 		bl	__aeabi_dmul
 552              	.LVL33:
 553              		.loc 1 323 22 view .LVU120
 554 003c FFF7FEFF 		bl	__aeabi_d2iz
 555              	.LVL34:
 556              		.loc 1 323 20 view .LVU121
 557 0040 6080     		strh	r0, [r4, #2]	@ movhi
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   if(Gimbal_angle[0] > 8191) Gimbal_angle[0] = 0;
 558              		.loc 1 325 3 is_stmt 1 view .LVU122
 559              		.loc 1 325 18 is_stmt 0 view .LVU123
 560 0042 424B     		ldr	r3, .L23+20
 561 0044 B3F90030 		ldrsh	r3, [r3]
 562              		.loc 1 325 5 view .LVU124
 563 0048 B3F5005F 		cmp	r3, #8192
 564 004c 6DDB     		blt	.L20
 565              		.loc 1 325 30 is_stmt 1 discriminator 1 view .LVU125
 566              		.loc 1 325 46 is_stmt 0 discriminator 1 view .LVU126
 567 004e 3F4B     		ldr	r3, .L23+20
 568 0050 0022     		movs	r2, #0
 569 0052 1A80     		strh	r2, [r3]	@ movhi
 570              	.L21:
 326:Core/Src/main.c ****   else if(Gimbal_angle[0] < 0) Gimbal_angle[0] = 8191;
 327:Core/Src/main.c ****     //ï¿½ï¿½PIDï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 328:Core/Src/main.c ****     //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½forï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½â£¬ï¿½ï¿½Ê±Õ¹ï¿½ï¿½
 329:Core/Src/main.c ****     int motor_ID = 0;
 571              		.loc 1 329 5 is_stmt 1 view .LVU127
 572              	.LVL35:
 330:Core/Src/main.c ****     angle_pid[motor_ID].target = Gimbal_angle[0];
 573              		.loc 1 330 5 view .LVU128
 574              		.loc 1 330 46 is_stmt 0 view .LVU129
 575 0054 3D4F     		ldr	r7, .L23+20
 576 0056 B7F90030 		ldrsh	r3, [r7]
 577 005a 07EE903A 		vmov	s15, r3	@ int
 578              		.loc 1 330 32 view .LVU130
 579 005e 3C4D     		ldr	r5, .L23+24
 580 0060 F8EEE77A 		vcvt.f32.s32	s15, s15
 581 0064 C5ED017A 		vstr.32	s15, [r5, #4]
 331:Core/Src/main.c ****     angle_pid[motor_ID].f_cal_pid(&angle_pid[motor_ID], moto_chassis[motor_ID].angle, 8192);
 582              		.loc 1 331 5 is_stmt 1 view .LVU131
 583              		.loc 1 331 24 is_stmt 0 view .LVU132
 584 0068 2B6E     		ldr	r3, [r5, #96]
 585              		.loc 1 331 79 view .LVU133
ARM GAS  /tmp/ccf61RgB.s 			page 17


 586 006a 3A4E     		ldr	r6, .L23+28
 587 006c B289     		ldrh	r2, [r6, #12]
 588 006e 00EE102A 		vmov	s0, r2	@ int
 589              		.loc 1 331 5 view .LVU134
 590 0072 4FF40051 		mov	r1, #8192
 591 0076 B8EE400A 		vcvt.f32.u32	s0, s0
 592 007a 2846     		mov	r0, r5
 593 007c 9847     		blx	r3
 594              	.LVL36:
 332:Core/Src/main.c ****     motor_pid[motor_ID].target = angle_pid[motor_ID].output;
 595              		.loc 1 332 5 is_stmt 1 view .LVU135
 596              		.loc 1 332 53 is_stmt 0 view .LVU136
 597 007e 2B6B     		ldr	r3, [r5, #48]	@ float
 598              		.loc 1 332 32 view .LVU137
 599 0080 354C     		ldr	r4, .L23+32
 600 0082 6360     		str	r3, [r4, #4]	@ float
 333:Core/Src/main.c ****     motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID],moto_chassis[motor_ID].speed_rpm, 0);
 601              		.loc 1 333 5 is_stmt 1 view .LVU138
 602              		.loc 1 333 24 is_stmt 0 view .LVU139
 603 0084 236E     		ldr	r3, [r4, #96]
 604              		.loc 1 333 78 view .LVU140
 605 0086 B6F90020 		ldrsh	r2, [r6]
 606 008a 00EE102A 		vmov	s0, r2	@ int
 607              		.loc 1 333 5 view .LVU141
 608 008e 0021     		movs	r1, #0
 609 0090 B8EEC00A 		vcvt.f32.s32	s0, s0
 610 0094 2046     		mov	r0, r4
 611 0096 9847     		blx	r3
 612              	.LVL37:
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****     motor_ID = 1;
 613              		.loc 1 335 5 is_stmt 1 view .LVU142
 336:Core/Src/main.c ****     angle_pid[motor_ID].target = Gimbal_angle[1];
 614              		.loc 1 336 5 view .LVU143
 615              		.loc 1 336 46 is_stmt 0 view .LVU144
 616 0098 B7F90230 		ldrsh	r3, [r7, #2]
 617 009c 07EE903A 		vmov	s15, r3	@ int
 618              		.loc 1 336 32 view .LVU145
 619 00a0 F8EEE77A 		vcvt.f32.s32	s15, s15
 620 00a4 C5ED1A7A 		vstr.32	s15, [r5, #104]
 337:Core/Src/main.c ****     angle_pid[motor_ID].f_cal_pid(&angle_pid[motor_ID], moto_chassis[motor_ID].angle, 8192);
 621              		.loc 1 337 5 is_stmt 1 view .LVU146
 622              		.loc 1 337 24 is_stmt 0 view .LVU147
 623 00a8 D5F8C430 		ldr	r3, [r5, #196]
 624              		.loc 1 337 79 view .LVU148
 625 00ac B28F     		ldrh	r2, [r6, #60]
 626 00ae 00EE102A 		vmov	s0, r2	@ int
 627              		.loc 1 337 5 view .LVU149
 628 00b2 4FF40051 		mov	r1, #8192
 629 00b6 B8EE400A 		vcvt.f32.u32	s0, s0
 630 00ba 05F16400 		add	r0, r5, #100
 631 00be 9847     		blx	r3
 632              	.LVL38:
 338:Core/Src/main.c ****     motor_pid[motor_ID].target = angle_pid[motor_ID].output; 																							
 633              		.loc 1 338 5 is_stmt 1 view .LVU150
 634              		.loc 1 338 53 is_stmt 0 view .LVU151
 635 00c0 D5F89430 		ldr	r3, [r5, #148]	@ float
ARM GAS  /tmp/ccf61RgB.s 			page 18


 636              		.loc 1 338 32 view .LVU152
 637 00c4 A366     		str	r3, [r4, #104]	@ float
 339:Core/Src/main.c ****     motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID],moto_chassis[motor_ID].speed_rpm, 0);
 638              		.loc 1 339 5 is_stmt 1 view .LVU153
 639              		.loc 1 339 24 is_stmt 0 view .LVU154
 640 00c6 D4F8C430 		ldr	r3, [r4, #196]
 641              		.loc 1 339 78 view .LVU155
 642 00ca B6F93020 		ldrsh	r2, [r6, #48]
 643 00ce 00EE102A 		vmov	s0, r2	@ int
 644              		.loc 1 339 5 view .LVU156
 645 00d2 0021     		movs	r1, #0
 646 00d4 B8EEC00A 		vcvt.f32.s32	s0, s0
 647 00d8 04F16400 		add	r0, r4, #100
 648 00dc 9847     		blx	r3
 649              	.LVL39:
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****     set_moto_current(&hcan1, motor_pid[0].output, motor_pid[1].output, 0, 0);
 650              		.loc 1 341 5 is_stmt 1 view .LVU157
 651              		.loc 1 341 42 is_stmt 0 view .LVU158
 652 00de D4ED0C7A 		vldr.32	s15, [r4, #48]
 653              		.loc 1 341 63 view .LVU159
 654 00e2 94ED257A 		vldr.32	s14, [r4, #148]
 655              		.loc 1 341 5 view .LVU160
 656 00e6 BDEEC77A 		vcvt.s32.f32	s14, s14
 657 00ea FDEEE77A 		vcvt.s32.f32	s15, s15
 658 00ee 0023     		movs	r3, #0
 659 00f0 0093     		str	r3, [sp]
 660 00f2 17EE102A 		vmov	r2, s14	@ int
 661 00f6 12B2     		sxth	r2, r2
 662 00f8 17EE901A 		vmov	r1, s15	@ int
 663 00fc 09B2     		sxth	r1, r1
 664 00fe 1748     		ldr	r0, .L23+36
 665 0100 FFF7FEFF 		bl	set_moto_current
 666              	.LVL40:
 342:Core/Src/main.c ****     printf("%d, %d\n", moto_chassis[0].angle, moto_chassis[1].angle);
 667              		.loc 1 342 5 is_stmt 1 view .LVU161
 668 0104 B28F     		ldrh	r2, [r6, #60]
 669 0106 B189     		ldrh	r1, [r6, #12]
 670 0108 1548     		ldr	r0, .L23+40
 671 010a FFF7FEFF 		bl	printf
 672              	.LVL41:
 343:Core/Src/main.c ****     printf("%f\n", IMU_Angle[0]);
 673              		.loc 1 343 5 view .LVU162
 674 010e 0B4B     		ldr	r3, .L23+4
 675 0110 1868     		ldr	r0, [r3]	@ float
 676 0112 FFF7FEFF 		bl	__aeabi_f2d
 677              	.LVL42:
 678 0116 0246     		mov	r2, r0
 679 0118 0B46     		mov	r3, r1
 680 011a 1248     		ldr	r0, .L23+44
 681 011c FFF7FEFF 		bl	printf
 682              	.LVL43:
 344:Core/Src/main.c ****     HAL_Delay(1); //1000hz
 683              		.loc 1 344 5 view .LVU163
 684 0120 0120     		movs	r0, #1
 685 0122 FFF7FEFF 		bl	HAL_Delay
 686              	.LVL44:
ARM GAS  /tmp/ccf61RgB.s 			page 19


 345:Core/Src/main.c **** }
 687              		.loc 1 345 1 is_stmt 0 view .LVU164
 688 0126 03B0     		add	sp, sp, #12
 689              	.LCFI16:
 690              		.cfi_remember_state
 691              		.cfi_def_cfa_offset 20
 692              		@ sp needed
 693 0128 F0BD     		pop	{r4, r5, r6, r7, pc}
 694              	.LVL45:
 695              	.L20:
 696              	.LCFI17:
 697              		.cfi_restore_state
 326:Core/Src/main.c ****     //ï¿½ï¿½PIDï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 698              		.loc 1 326 8 is_stmt 1 view .LVU165
 326:Core/Src/main.c ****     //ï¿½ï¿½PIDï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 699              		.loc 1 326 10 is_stmt 0 view .LVU166
 700 012a 002B     		cmp	r3, #0
 701 012c 92DA     		bge	.L21
 326:Core/Src/main.c ****     //ï¿½ï¿½PIDï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 702              		.loc 1 326 32 is_stmt 1 discriminator 1 view .LVU167
 326:Core/Src/main.c ****     //ï¿½ï¿½PIDï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 703              		.loc 1 326 48 is_stmt 0 discriminator 1 view .LVU168
 704 012e 074B     		ldr	r3, .L23+20
 705 0130 41F6FF72 		movw	r2, #8191
 706 0134 1A80     		strh	r2, [r3]	@ movhi
 707 0136 8DE7     		b	.L21
 708              	.L24:
 709              		.align	2
 710              	.L23:
 711 0138 00000000 		.word	i
 712 013c 00000000 		.word	IMU_Angle
 713 0140 00000000 		.word	ABS_IMU_angle
 714 0144 00806640 		.word	1080459264
 715 0148 00003640 		.word	1077280768
 716 014c 00000000 		.word	Gimbal_angle
 717 0150 00000000 		.word	angle_pid
 718 0154 00000000 		.word	moto_chassis
 719 0158 00000000 		.word	motor_pid
 720 015c 00000000 		.word	hcan1
 721 0160 00000000 		.word	.LC1
 722 0164 00000000 		.word	.LC2
 723              		.cfi_endproc
 724              	.LFE140:
 726              		.section	.text.Abs_angle_PID_test_loop,"ax",%progbits
 727              		.align	1
 728              		.global	Abs_angle_PID_test_loop
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 733              	Abs_angle_PID_test_loop:
 734              	.LVL46:
 735              	.LFB141:
 346:Core/Src/main.c **** 
 347:Core/Src/main.c **** //ï¿½ï¿½ï¿½ï¿½PIDÐ§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 348:Core/Src/main.c **** void Abs_angle_PID_test_loop(int motor_ID)
 349:Core/Src/main.c **** {
 736              		.loc 1 349 1 is_stmt 1 view -0
ARM GAS  /tmp/ccf61RgB.s 			page 20


 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		.loc 1 349 1 is_stmt 0 view .LVU170
 741 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 742              	.LCFI18:
 743              		.cfi_def_cfa_offset 20
 744              		.cfi_offset 4, -20
 745              		.cfi_offset 5, -16
 746              		.cfi_offset 6, -12
 747              		.cfi_offset 7, -8
 748              		.cfi_offset 14, -4
 749 0002 83B0     		sub	sp, sp, #12
 750              	.LCFI19:
 751              		.cfi_def_cfa_offset 32
 752 0004 0446     		mov	r4, r0
 350:Core/Src/main.c ****   //ï¿½ï¿½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 351:Core/Src/main.c ****   //IMUï¿½ï¿½Ò»ï¿½ï¿½
 352:Core/Src/main.c ****   ABS_IMU_angle[0] = (int)((IMU_Angle[2]*8192)/360); //yaw
 753              		.loc 1 352 3 is_stmt 1 view .LVU171
 754              		.loc 1 352 38 is_stmt 0 view .LVU172
 755 0006 3E4B     		ldr	r3, .L31
 756 0008 93ED027A 		vldr.32	s14, [r3, #8]
 757              		.loc 1 352 41 view .LVU173
 758 000c DFED3D7A 		vldr.32	s15, .L31+4
 759 0010 27EE277A 		vmul.f32	s14, s14, s15
 760              		.loc 1 352 47 view .LVU174
 761 0014 DFED3C6A 		vldr.32	s13, .L31+8
 762 0018 C7EE267A 		vdiv.f32	s15, s14, s13
 763              		.loc 1 352 22 view .LVU175
 764 001c FDEEE77A 		vcvt.s32.f32	s15, s15
 765              		.loc 1 352 20 view .LVU176
 766 0020 3A4F     		ldr	r7, .L31+12
 767 0022 17EE902A 		vmov	r2, s15	@ int
 768 0026 3A80     		strh	r2, [r7]	@ movhi
 353:Core/Src/main.c ****   ABS_IMU_angle[1] = (int)(((IMU_Angle[0]+180.0)*8192)/360); //pitch
 769              		.loc 1 353 3 is_stmt 1 view .LVU177
 770              		.loc 1 353 39 is_stmt 0 view .LVU178
 771 0028 1868     		ldr	r0, [r3]	@ float
 772              	.LVL47:
 773              		.loc 1 353 39 view .LVU179
 774 002a FFF7FEFF 		bl	__aeabi_f2d
 775              	.LVL48:
 776              		.loc 1 353 42 view .LVU180
 777 002e 0022     		movs	r2, #0
 778 0030 374B     		ldr	r3, .L31+16
 779 0032 FFF7FEFF 		bl	__aeabi_dadd
 780              	.LVL49:
 781              		.loc 1 353 49 view .LVU181
 782 0036 0022     		movs	r2, #0
 783 0038 364B     		ldr	r3, .L31+20
 784 003a FFF7FEFF 		bl	__aeabi_dmul
 785              	.LVL50:
 786              		.loc 1 353 55 view .LVU182
 787 003e 0022     		movs	r2, #0
 788 0040 354B     		ldr	r3, .L31+24
 789 0042 FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/ccf61RgB.s 			page 21


 790              	.LVL51:
 791              		.loc 1 353 22 view .LVU183
 792 0046 FFF7FEFF 		bl	__aeabi_d2iz
 793              	.LVL52:
 794              		.loc 1 353 20 view .LVU184
 795 004a 7880     		strh	r0, [r7, #2]	@ movhi
 354:Core/Src/main.c ****   abs_pid[motor_ID].target = 0;
 796              		.loc 1 354 3 is_stmt 1 view .LVU185
 797              		.loc 1 354 28 is_stmt 0 view .LVU186
 798 004c 6426     		movs	r6, #100
 799 004e 04FB06F6 		mul	r6, r4, r6
 800 0052 324D     		ldr	r5, .L31+28
 801 0054 3544     		add	r5, r5, r6
 802 0056 0023     		movs	r3, #0
 803 0058 6B60     		str	r3, [r5, #4]	@ float
 355:Core/Src/main.c ****   abs_pid[motor_ID].f_cal_pid(&abs_pid[motor_ID], ABS_IMU_angle[motor_ID], 8192);
 804              		.loc 1 355 3 is_stmt 1 view .LVU187
 805              		.loc 1 355 20 is_stmt 0 view .LVU188
 806 005a 2B6E     		ldr	r3, [r5, #96]
 807              		.loc 1 355 64 view .LVU189
 808 005c 37F91420 		ldrsh	r2, [r7, r4, lsl #1]
 809 0060 00EE102A 		vmov	s0, r2	@ int
 810              		.loc 1 355 3 view .LVU190
 811 0064 4FF40051 		mov	r1, #8192
 812 0068 B8EEC00A 		vcvt.f32.s32	s0, s0
 813 006c 2846     		mov	r0, r5
 814 006e 9847     		blx	r3
 815              	.LVL53:
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   motor_pid[motor_ID].target = abs_pid[motor_ID].output; 																							
 816              		.loc 1 357 3 is_stmt 1 view .LVU191
 817              		.loc 1 357 49 is_stmt 0 view .LVU192
 818 0070 2B6B     		ldr	r3, [r5, #48]	@ float
 819              		.loc 1 357 30 view .LVU193
 820 0072 2B48     		ldr	r0, .L31+32
 821 0074 3044     		add	r0, r0, r6
 822 0076 4360     		str	r3, [r0, #4]	@ float
 358:Core/Src/main.c ****   motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID],moto_chassis[motor_ID].speed_rpm, 0);
 823              		.loc 1 358 3 is_stmt 1 view .LVU194
 824              		.loc 1 358 22 is_stmt 0 view .LVU195
 825 0078 026E     		ldr	r2, [r0, #96]
 826              		.loc 1 358 76 view .LVU196
 827 007a 04EB4403 		add	r3, r4, r4, lsl #1
 828 007e 1B01     		lsls	r3, r3, #4
 829 0080 2849     		ldr	r1, .L31+36
 830 0082 CB5E     		ldrsh	r3, [r1, r3]
 831 0084 00EE103A 		vmov	s0, r3	@ int
 832              		.loc 1 358 3 view .LVU197
 833 0088 0021     		movs	r1, #0
 834 008a B8EEC00A 		vcvt.f32.s32	s0, s0
 835 008e 9047     		blx	r2
 836              	.LVL54:
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   if(motor_ID == 0) set_moto_current(&hcan1, motor_pid[motor_ID].output, 0, 0, 0);
 837              		.loc 1 360 3 is_stmt 1 view .LVU198
 838              		.loc 1 360 5 is_stmt 0 view .LVU199
 839 0090 94B1     		cbz	r4, .L29
ARM GAS  /tmp/ccf61RgB.s 			page 22


 840              	.L26:
 361:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 841              		.loc 1 361 3 is_stmt 1 view .LVU200
 842              		.loc 1 361 5 is_stmt 0 view .LVU201
 843 0092 012C     		cmp	r4, #1
 844 0094 22D0     		beq	.L30
 845              	.L27:
 362:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 363:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].speed_rpm);
 364:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].total_angle);
 365:Core/Src/main.c ****   //printf("%d, %f, %f\n", ABS_IMU_angle[motor_ID], abs_pid[motor_ID].output, motor_pid[motor_ID].o
 366:Core/Src/main.c ****   printf("%d, %d\n", moto_chassis[motor_ID].angle, ABS_IMU_angle[motor_ID]);
 846              		.loc 1 366 3 is_stmt 1 view .LVU202
 847              		.loc 1 366 44 is_stmt 0 view .LVU203
 848 0096 04EB4402 		add	r2, r4, r4, lsl #1
 849 009a 224B     		ldr	r3, .L31+36
 850 009c 03EB0213 		add	r3, r3, r2, lsl #4
 851              		.loc 1 366 3 view .LVU204
 852 00a0 1A4A     		ldr	r2, .L31+12
 853 00a2 32F91420 		ldrsh	r2, [r2, r4, lsl #1]
 854 00a6 9989     		ldrh	r1, [r3, #12]
 855 00a8 1F48     		ldr	r0, .L31+40
 856 00aa FFF7FEFF 		bl	printf
 857              	.LVL55:
 367:Core/Src/main.c ****   HAL_Delay(1);
 858              		.loc 1 367 3 is_stmt 1 view .LVU205
 859 00ae 0120     		movs	r0, #1
 860 00b0 FFF7FEFF 		bl	HAL_Delay
 861              	.LVL56:
 368:Core/Src/main.c **** }
 862              		.loc 1 368 1 is_stmt 0 view .LVU206
 863 00b4 03B0     		add	sp, sp, #12
 864              	.LCFI20:
 865              		.cfi_remember_state
 866              		.cfi_def_cfa_offset 20
 867              		@ sp needed
 868 00b6 F0BD     		pop	{r4, r5, r6, r7, pc}
 869              	.LVL57:
 870              	.L29:
 871              	.LCFI21:
 872              		.cfi_restore_state
 360:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 873              		.loc 1 360 21 is_stmt 1 discriminator 1 view .LVU207
 360:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 874              		.loc 1 360 65 is_stmt 0 discriminator 1 view .LVU208
 875 00b8 194B     		ldr	r3, .L31+32
 876 00ba 6422     		movs	r2, #100
 877 00bc 02FB0433 		mla	r3, r2, r4, r3
 878 00c0 D3ED0C7A 		vldr.32	s15, [r3, #48]
 360:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 879              		.loc 1 360 21 discriminator 1 view .LVU209
 880 00c4 FDEEE77A 		vcvt.s32.f32	s15, s15
 881 00c8 0022     		movs	r2, #0
 882 00ca 0092     		str	r2, [sp]
 883 00cc 1346     		mov	r3, r2
 884 00ce 17EE901A 		vmov	r1, s15	@ int
 885 00d2 09B2     		sxth	r1, r1
ARM GAS  /tmp/ccf61RgB.s 			page 23


 886 00d4 1548     		ldr	r0, .L31+44
 887 00d6 FFF7FEFF 		bl	set_moto_current
 888              	.LVL58:
 889 00da DAE7     		b	.L26
 890              	.L30:
 361:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 891              		.loc 1 361 21 is_stmt 1 discriminator 1 view .LVU210
 361:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 892              		.loc 1 361 68 is_stmt 0 discriminator 1 view .LVU211
 893 00dc 104B     		ldr	r3, .L31+32
 894 00de 6422     		movs	r2, #100
 895 00e0 02FB0433 		mla	r3, r2, r4, r3
 896 00e4 D3ED0C7A 		vldr.32	s15, [r3, #48]
 361:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 897              		.loc 1 361 21 discriminator 1 view .LVU212
 898 00e8 FDEEE77A 		vcvt.s32.f32	s15, s15
 899 00ec 0021     		movs	r1, #0
 900 00ee 0091     		str	r1, [sp]
 901 00f0 0B46     		mov	r3, r1
 902 00f2 17EE902A 		vmov	r2, s15	@ int
 903 00f6 12B2     		sxth	r2, r2
 904 00f8 0C48     		ldr	r0, .L31+44
 905 00fa FFF7FEFF 		bl	set_moto_current
 906              	.LVL59:
 907 00fe CAE7     		b	.L27
 908              	.L32:
 909              		.align	2
 910              	.L31:
 911 0100 00000000 		.word	IMU_Angle
 912 0104 00000046 		.word	1174405120
 913 0108 0000B443 		.word	1135869952
 914 010c 00000000 		.word	ABS_IMU_angle
 915 0110 00806640 		.word	1080459264
 916 0114 0000C040 		.word	1086324736
 917 0118 00807640 		.word	1081507840
 918 011c 00000000 		.word	abs_pid
 919 0120 00000000 		.word	motor_pid
 920 0124 00000000 		.word	moto_chassis
 921 0128 00000000 		.word	.LC1
 922 012c 00000000 		.word	hcan1
 923              		.cfi_endproc
 924              	.LFE141:
 926              		.section	.rodata.Rel_angle_PID_test_loop.str1.4,"aMS",%progbits,1
 927              		.align	2
 928              	.LC3:
 929 0000 25662C20 		.ascii	"%f, \000"
 929      00
 930 0005 000000   		.align	2
 931              	.LC4:
 932 0008 25642C20 		.ascii	"%d, %d, %d, %d, %f, %f, %d\012\000"
 932      25642C20 
 932      25642C20 
 932      25642C20 
 932      25662C20 
 933              		.section	.text.Rel_angle_PID_test_loop,"ax",%progbits
 934              		.align	1
 935              		.global	Rel_angle_PID_test_loop
ARM GAS  /tmp/ccf61RgB.s 			page 24


 936              		.syntax unified
 937              		.thumb
 938              		.thumb_func
 940              	Rel_angle_PID_test_loop:
 941              	.LVL60:
 942              	.LFB142:
 369:Core/Src/main.c **** 
 370:Core/Src/main.c **** //Î»ï¿½Ã»ï¿½PIDÐ§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 371:Core/Src/main.c **** void Rel_angle_PID_test_loop(int motor_ID)
 372:Core/Src/main.c **** {
 943              		.loc 1 372 1 is_stmt 1 view -0
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
 947              		.loc 1 372 1 is_stmt 0 view .LVU214
 948 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 949              	.LCFI22:
 950              		.cfi_def_cfa_offset 24
 951              		.cfi_offset 4, -24
 952              		.cfi_offset 5, -20
 953              		.cfi_offset 6, -16
 954              		.cfi_offset 7, -12
 955              		.cfi_offset 8, -8
 956              		.cfi_offset 14, -4
 957 0004 2DED028B 		vpush.64	{d8}
 958              	.LCFI23:
 959              		.cfi_def_cfa_offset 32
 960              		.cfi_offset 80, -32
 961              		.cfi_offset 81, -28
 962 0008 86B0     		sub	sp, sp, #24
 963              	.LCFI24:
 964              		.cfi_def_cfa_offset 56
 965 000a 0446     		mov	r4, r0
 373:Core/Src/main.c ****   angle_pid[motor_ID].target = 7000;
 966              		.loc 1 373 3 is_stmt 1 view .LVU215
 967              		.loc 1 373 30 is_stmt 0 view .LVU216
 968 000c 6426     		movs	r6, #100
 969 000e 00FB06F6 		mul	r6, r0, r6
 970 0012 474D     		ldr	r5, .L39
 971 0014 3544     		add	r5, r5, r6
 972 0016 474B     		ldr	r3, .L39+4
 973 0018 6B60     		str	r3, [r5, #4]	@ float
 374:Core/Src/main.c ****   angle_pid[motor_ID].f_cal_pid(&angle_pid[motor_ID], moto_chassis[motor_ID].angle, 8192);
 974              		.loc 1 374 3 is_stmt 1 view .LVU217
 975              		.loc 1 374 22 is_stmt 0 view .LVU218
 976 001a 2A6E     		ldr	r2, [r5, #96]
 977              		.loc 1 374 77 view .LVU219
 978 001c 464F     		ldr	r7, .L39+8
 979 001e 00EB4003 		add	r3, r0, r0, lsl #1
 980 0022 4FEA0318 		lsl	r8, r3, #4
 981 0026 07EB0313 		add	r3, r7, r3, lsl #4
 982 002a 9B89     		ldrh	r3, [r3, #12]
 983 002c 00EE103A 		vmov	s0, r3	@ int
 984              		.loc 1 374 3 view .LVU220
 985 0030 4FF40051 		mov	r1, #8192
 986 0034 B8EE400A 		vcvt.f32.u32	s0, s0
 987 0038 2846     		mov	r0, r5
ARM GAS  /tmp/ccf61RgB.s 			page 25


 988              	.LVL61:
 989              		.loc 1 374 3 view .LVU221
 990 003a 9047     		blx	r2
 991              	.LVL62:
 375:Core/Src/main.c ****   //printf("%d\n", (int)angle_pid.output);
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   motor_pid[motor_ID].target = angle_pid[motor_ID].output; 																							
 992              		.loc 1 377 3 is_stmt 1 view .LVU222
 993              		.loc 1 377 51 is_stmt 0 view .LVU223
 994 003c 2B6B     		ldr	r3, [r5, #48]	@ float
 995              		.loc 1 377 30 view .LVU224
 996 003e 3F48     		ldr	r0, .L39+12
 997 0040 3044     		add	r0, r0, r6
 998 0042 4360     		str	r3, [r0, #4]	@ float
 378:Core/Src/main.c ****   motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID],moto_chassis[motor_ID].speed_rpm, 0);
 999              		.loc 1 378 3 is_stmt 1 view .LVU225
 1000              		.loc 1 378 22 is_stmt 0 view .LVU226
 1001 0044 036E     		ldr	r3, [r0, #96]
 1002              		.loc 1 378 76 view .LVU227
 1003 0046 37F90820 		ldrsh	r2, [r7, r8]
 1004 004a 00EE102A 		vmov	s0, r2	@ int
 1005              		.loc 1 378 3 view .LVU228
 1006 004e 0021     		movs	r1, #0
 1007 0050 B8EEC00A 		vcvt.f32.s32	s0, s0
 1008 0054 9847     		blx	r3
 1009              	.LVL63:
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   if(motor_ID == 0) set_moto_current(&hcan1, motor_pid[motor_ID].output, 0, 0, 0);
 1010              		.loc 1 380 3 is_stmt 1 view .LVU229
 1011              		.loc 1 380 5 is_stmt 0 view .LVU230
 1012 0056 002C     		cmp	r4, #0
 1013 0058 46D0     		beq	.L37
 1014              	.L34:
 381:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1015              		.loc 1 381 3 is_stmt 1 view .LVU231
 1016              		.loc 1 381 5 is_stmt 0 view .LVU232
 1017 005a 012C     		cmp	r4, #1
 1018 005c 56D0     		beq	.L38
 1019              	.L35:
 382:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 383:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].speed_rpm);
 384:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].total_angle);
 385:Core/Src/main.c ****   printf("%f, ", (float)j);
 1020              		.loc 1 385 3 is_stmt 1 view .LVU233
 1021              		.loc 1 385 18 is_stmt 0 view .LVU234
 1022 005e 384B     		ldr	r3, .L39+16
 1023 0060 1868     		ldr	r0, [r3]
 1024              		.loc 1 385 3 view .LVU235
 1025 0062 07EE900A 		vmov	s15, r0	@ int
 1026 0066 F8EEE77A 		vcvt.f32.s32	s15, s15
 1027 006a 17EE900A 		vmov	r0, s15
 1028 006e FFF7FEFF 		bl	__aeabi_f2d
 1029              	.LVL64:
 1030 0072 0246     		mov	r2, r0
 1031 0074 0B46     		mov	r3, r1
 1032 0076 3348     		ldr	r0, .L39+20
 1033 0078 FFF7FEFF 		bl	printf
ARM GAS  /tmp/ccf61RgB.s 			page 26


 1034              	.LVL65:
 386:Core/Src/main.c ****   HAL_Delay(1);
 1035              		.loc 1 386 3 is_stmt 1 view .LVU236
 1036 007c 0120     		movs	r0, #1
 1037 007e FFF7FEFF 		bl	HAL_Delay
 1038              	.LVL66:
 387:Core/Src/main.c ****   printf("%d, %d, %d, %d, %f, %f, %d\n", 
 1039              		.loc 1 387 3 view .LVU237
 388:Core/Src/main.c ****                     speed_set, moto_chassis[motor_ID].angle, 
 1040              		.loc 1 388 54 is_stmt 0 view .LVU238
 1041 0082 04EB4402 		add	r2, r4, r4, lsl #1
 1042 0086 2C4B     		ldr	r3, .L39+8
 1043 0088 03EB0213 		add	r3, r3, r2, lsl #4
 1044 008c 9D89     		ldrh	r5, [r3, #12]
 389:Core/Src/main.c ****                     (int)motor_pid[motor_ID].output, 
 1045              		.loc 1 389 45 view .LVU239
 1046 008e 6423     		movs	r3, #100
 1047 0090 04FB03F3 		mul	r3, r4, r3
 1048 0094 294A     		ldr	r2, .L39+12
 1049 0096 1A44     		add	r2, r2, r3
 1050 0098 92ED0C8A 		vldr.32	s16, [r2, #48]
 390:Core/Src/main.c ****                     (int)motor_pid[motor_ID].iout, 
 1051              		.loc 1 390 45 view .LVU240
 1052 009c D2ED0A8A 		vldr.32	s17, [r2, #40]
 391:Core/Src/main.c ****                     angle_pid[motor_ID].output, 
 1053              		.loc 1 391 40 view .LVU241
 1054 00a0 234A     		ldr	r2, .L39
 1055 00a2 1344     		add	r3, r3, r2
 1056 00a4 1E6B     		ldr	r6, [r3, #48]	@ float
 392:Core/Src/main.c ****                     IMU_Angle[motor_ID]);
 1057              		.loc 1 392 30 view .LVU242
 1058 00a6 284B     		ldr	r3, .L39+24
 1059 00a8 03EB8403 		add	r3, r3, r4, lsl #2
 387:Core/Src/main.c ****                     speed_set, moto_chassis[motor_ID].angle, 
 1060              		.loc 1 387 3 view .LVU243
 1061 00ac BDEEC88A 		vcvt.s32.f32	s16, s16
 1062 00b0 264A     		ldr	r2, .L39+28
 1063 00b2 1468     		ldr	r4, [r2]
 1064              	.LVL67:
 387:Core/Src/main.c ****                     speed_set, moto_chassis[motor_ID].angle, 
 1065              		.loc 1 387 3 view .LVU244
 1066 00b4 1868     		ldr	r0, [r3]	@ float
 1067 00b6 FFF7FEFF 		bl	__aeabi_f2d
 1068              	.LVL68:
 1069 00ba CDE90401 		strd	r0, [sp, #16]
 1070 00be 3046     		mov	r0, r6	@ float
 1071 00c0 FFF7FEFF 		bl	__aeabi_f2d
 1072              	.LVL69:
 1073 00c4 CDE90201 		strd	r0, [sp, #8]
 1074 00c8 FDEEE88A 		vcvt.s32.f32	s17, s17
 1075 00cc CDED008A 		vstr.32	s17, [sp]	@ int
 1076 00d0 18EE103A 		vmov	r3, s16	@ int
 1077 00d4 2A46     		mov	r2, r5
 1078 00d6 2146     		mov	r1, r4
 1079 00d8 1D48     		ldr	r0, .L39+32
 1080 00da FFF7FEFF 		bl	printf
 1081              	.LVL70:
ARM GAS  /tmp/ccf61RgB.s 			page 27


 393:Core/Src/main.c **** }
 1082              		.loc 1 393 1 view .LVU245
 1083 00de 06B0     		add	sp, sp, #24
 1084              	.LCFI25:
 1085              		.cfi_remember_state
 1086              		.cfi_def_cfa_offset 32
 1087              		@ sp needed
 1088 00e0 BDEC028B 		vldm	sp!, {d8}
 1089              	.LCFI26:
 1090              		.cfi_restore 80
 1091              		.cfi_restore 81
 1092              		.cfi_def_cfa_offset 24
 1093 00e4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1094              	.LVL71:
 1095              	.L37:
 1096              	.LCFI27:
 1097              		.cfi_restore_state
 380:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1098              		.loc 1 380 21 is_stmt 1 discriminator 1 view .LVU246
 380:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1099              		.loc 1 380 65 is_stmt 0 discriminator 1 view .LVU247
 1100 00e8 144B     		ldr	r3, .L39+12
 1101 00ea 6422     		movs	r2, #100
 1102 00ec 02FB0433 		mla	r3, r2, r4, r3
 1103 00f0 D3ED0C7A 		vldr.32	s15, [r3, #48]
 380:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1104              		.loc 1 380 21 discriminator 1 view .LVU248
 1105 00f4 FDEEE77A 		vcvt.s32.f32	s15, s15
 1106 00f8 0022     		movs	r2, #0
 1107 00fa 0092     		str	r2, [sp]
 1108 00fc 1346     		mov	r3, r2
 1109 00fe 17EE901A 		vmov	r1, s15	@ int
 1110 0102 09B2     		sxth	r1, r1
 1111 0104 1348     		ldr	r0, .L39+36
 1112 0106 FFF7FEFF 		bl	set_moto_current
 1113              	.LVL72:
 1114 010a A6E7     		b	.L34
 1115              	.L38:
 381:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1116              		.loc 1 381 21 is_stmt 1 discriminator 1 view .LVU249
 381:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1117              		.loc 1 381 68 is_stmt 0 discriminator 1 view .LVU250
 1118 010c 0B4B     		ldr	r3, .L39+12
 1119 010e 6422     		movs	r2, #100
 1120 0110 02FB0433 		mla	r3, r2, r4, r3
 1121 0114 D3ED0C7A 		vldr.32	s15, [r3, #48]
 381:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1122              		.loc 1 381 21 discriminator 1 view .LVU251
 1123 0118 FDEEE77A 		vcvt.s32.f32	s15, s15
 1124 011c 0021     		movs	r1, #0
 1125 011e 0091     		str	r1, [sp]
 1126 0120 0B46     		mov	r3, r1
 1127 0122 17EE902A 		vmov	r2, s15	@ int
 1128 0126 12B2     		sxth	r2, r2
 1129 0128 0A48     		ldr	r0, .L39+36
 1130 012a FFF7FEFF 		bl	set_moto_current
 1131              	.LVL73:
ARM GAS  /tmp/ccf61RgB.s 			page 28


 1132 012e 96E7     		b	.L35
 1133              	.L40:
 1134              		.align	2
 1135              	.L39:
 1136 0130 00000000 		.word	angle_pid
 1137 0134 00C0DA45 		.word	1171963904
 1138 0138 00000000 		.word	moto_chassis
 1139 013c 00000000 		.word	motor_pid
 1140 0140 00000000 		.word	j
 1141 0144 00000000 		.word	.LC3
 1142 0148 00000000 		.word	IMU_Angle
 1143 014c 00000000 		.word	speed_set
 1144 0150 08000000 		.word	.LC4
 1145 0154 00000000 		.word	hcan1
 1146              		.cfi_endproc
 1147              	.LFE142:
 1149              		.section	.text.speed_loop_PID_tuning,"ax",%progbits
 1150              		.align	1
 1151              		.global	speed_loop_PID_tuning
 1152              		.syntax unified
 1153              		.thumb
 1154              		.thumb_func
 1156              	speed_loop_PID_tuning:
 1157              	.LVL74:
 1158              	.LFB143:
 394:Core/Src/main.c **** 
 395:Core/Src/main.c **** //ï¿½Ù¶È»ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½ï¿½Î£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù¶È£ï¿½
 396:Core/Src/main.c **** void speed_loop_PID_tuning(int motor_ID)
 397:Core/Src/main.c **** {
 1159              		.loc 1 397 1 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		.loc 1 397 1 is_stmt 0 view .LVU253
 1164 0000 10B5     		push	{r4, lr}
 1165              	.LCFI28:
 1166              		.cfi_def_cfa_offset 8
 1167              		.cfi_offset 4, -8
 1168              		.cfi_offset 14, -4
 1169 0002 82B0     		sub	sp, sp, #8
 1170              	.LCFI29:
 1171              		.cfi_def_cfa_offset 16
 1172 0004 0446     		mov	r4, r0
 398:Core/Src/main.c ****   speed = moto_chassis[motor_ID].speed_rpm;
 1173              		.loc 1 398 3 is_stmt 1 view .LVU254
 1174              		.loc 1 398 33 is_stmt 0 view .LVU255
 1175 0006 00EB4003 		add	r3, r0, r0, lsl #1
 1176 000a 1B01     		lsls	r3, r3, #4
 1177 000c 244A     		ldr	r2, .L50
 1178 000e D25E     		ldrsh	r2, [r2, r3]
 1179              		.loc 1 398 9 view .LVU256
 1180 0010 244B     		ldr	r3, .L50+4
 1181 0012 1A60     		str	r2, [r3]
 399:Core/Src/main.c ****   time++;
 1182              		.loc 1 399 3 is_stmt 1 view .LVU257
 1183              		.loc 1 399 7 is_stmt 0 view .LVU258
 1184 0014 244A     		ldr	r2, .L50+8
ARM GAS  /tmp/ccf61RgB.s 			page 29


 1185 0016 1368     		ldr	r3, [r2]
 1186 0018 0133     		adds	r3, r3, #1
 1187 001a 1360     		str	r3, [r2]
 400:Core/Src/main.c ****   if(i <= 400) current = 0;
 1188              		.loc 1 400 3 is_stmt 1 view .LVU259
 1189              		.loc 1 400 8 is_stmt 0 view .LVU260
 1190 001c 234B     		ldr	r3, .L50+12
 1191 001e 1B68     		ldr	r3, [r3]
 1192              		.loc 1 400 5 view .LVU261
 1193 0020 B3F5C87F 		cmp	r3, #400
 1194 0024 23DC     		bgt	.L42
 1195              		.loc 1 400 16 is_stmt 1 discriminator 1 view .LVU262
 1196              		.loc 1 400 24 is_stmt 0 discriminator 1 view .LVU263
 1197 0026 224A     		ldr	r2, .L50+16
 1198 0028 0021     		movs	r1, #0
 1199 002a 1160     		str	r1, [r2]
 1200              	.L43:
 401:Core/Src/main.c ****   else current = 1500;
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   if(i >= 800) i = 0;
 1201              		.loc 1 403 3 is_stmt 1 view .LVU264
 1202              		.loc 1 403 5 is_stmt 0 view .LVU265
 1203 002c B3F5487F 		cmp	r3, #800
 1204 0030 02DB     		blt	.L44
 1205              		.loc 1 403 16 is_stmt 1 discriminator 1 view .LVU266
 1206              		.loc 1 403 18 is_stmt 0 discriminator 1 view .LVU267
 1207 0032 1E4B     		ldr	r3, .L50+12
 1208 0034 0022     		movs	r2, #0
 1209 0036 1A60     		str	r2, [r3]
 1210              	.L44:
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   printf("%f, ", (float)j);
 1211              		.loc 1 405 3 is_stmt 1 view .LVU268
 1212              		.loc 1 405 18 is_stmt 0 view .LVU269
 1213 0038 1E4B     		ldr	r3, .L50+20
 1214 003a 1868     		ldr	r0, [r3]
 1215              	.LVL75:
 1216              		.loc 1 405 3 view .LVU270
 1217 003c 07EE900A 		vmov	s15, r0	@ int
 1218 0040 F8EEE77A 		vcvt.f32.s32	s15, s15
 1219 0044 17EE900A 		vmov	r0, s15
 1220 0048 FFF7FEFF 		bl	__aeabi_f2d
 1221              	.LVL76:
 1222 004c 0246     		mov	r2, r0
 1223 004e 0B46     		mov	r3, r1
 1224 0050 1948     		ldr	r0, .L50+24
 1225 0052 FFF7FEFF 		bl	printf
 1226              	.LVL77:
 406:Core/Src/main.c ****   printf("%d, %d\n", current, speed);
 1227              		.loc 1 406 3 is_stmt 1 view .LVU271
 1228 0056 134B     		ldr	r3, .L50+4
 1229 0058 1A68     		ldr	r2, [r3]
 1230 005a 154B     		ldr	r3, .L50+16
 1231 005c 1968     		ldr	r1, [r3]
 1232 005e 1748     		ldr	r0, .L50+28
 1233 0060 FFF7FEFF 		bl	printf
 1234              	.LVL78:
ARM GAS  /tmp/ccf61RgB.s 			page 30


 407:Core/Src/main.c ****   if(motor_ID == 0) set_moto_current(&hcan1, current, 0, 0, 0);
 1235              		.loc 1 407 3 view .LVU272
 1236              		.loc 1 407 5 is_stmt 0 view .LVU273
 1237 0064 44B1     		cbz	r4, .L48
 1238              	.L45:
 408:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, current, 0, 0);
 1239              		.loc 1 408 3 is_stmt 1 view .LVU274
 1240              		.loc 1 408 5 is_stmt 0 view .LVU275
 1241 0066 012C     		cmp	r4, #1
 1242 0068 10D0     		beq	.L49
 1243              	.L41:
 409:Core/Src/main.c **** }
 1244              		.loc 1 409 1 view .LVU276
 1245 006a 02B0     		add	sp, sp, #8
 1246              	.LCFI30:
 1247              		.cfi_remember_state
 1248              		.cfi_def_cfa_offset 8
 1249              		@ sp needed
 1250 006c 10BD     		pop	{r4, pc}
 1251              	.LVL79:
 1252              	.L42:
 1253              	.LCFI31:
 1254              		.cfi_restore_state
 401:Core/Src/main.c **** 
 1255              		.loc 1 401 8 is_stmt 1 view .LVU277
 401:Core/Src/main.c **** 
 1256              		.loc 1 401 16 is_stmt 0 view .LVU278
 1257 006e 104A     		ldr	r2, .L50+16
 1258 0070 40F2DC51 		movw	r1, #1500
 1259 0074 1160     		str	r1, [r2]
 1260 0076 D9E7     		b	.L43
 1261              	.LVL80:
 1262              	.L48:
 407:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, current, 0, 0);
 1263              		.loc 1 407 21 is_stmt 1 discriminator 1 view .LVU279
 1264 0078 0022     		movs	r2, #0
 1265 007a 0092     		str	r2, [sp]
 1266 007c 1346     		mov	r3, r2
 1267 007e 0C49     		ldr	r1, .L50+16
 1268 0080 B1F90010 		ldrsh	r1, [r1]
 1269 0084 0E48     		ldr	r0, .L50+32
 1270 0086 FFF7FEFF 		bl	set_moto_current
 1271              	.LVL81:
 1272 008a ECE7     		b	.L45
 1273              	.L49:
 408:Core/Src/main.c **** }
 1274              		.loc 1 408 21 discriminator 1 view .LVU280
 1275 008c 0021     		movs	r1, #0
 1276 008e 0091     		str	r1, [sp]
 1277 0090 0B46     		mov	r3, r1
 1278 0092 074A     		ldr	r2, .L50+16
 1279 0094 B2F90020 		ldrsh	r2, [r2]
 1280 0098 0948     		ldr	r0, .L50+32
 1281 009a FFF7FEFF 		bl	set_moto_current
 1282              	.LVL82:
 1283              		.loc 1 409 1 is_stmt 0 view .LVU281
 1284 009e E4E7     		b	.L41
ARM GAS  /tmp/ccf61RgB.s 			page 31


 1285              	.L51:
 1286              		.align	2
 1287              	.L50:
 1288 00a0 00000000 		.word	moto_chassis
 1289 00a4 00000000 		.word	speed
 1290 00a8 00000000 		.word	time
 1291 00ac 00000000 		.word	i
 1292 00b0 00000000 		.word	current
 1293 00b4 00000000 		.word	j
 1294 00b8 00000000 		.word	.LC3
 1295 00bc 00000000 		.word	.LC1
 1296 00c0 00000000 		.word	hcan1
 1297              		.cfi_endproc
 1298              	.LFE143:
 1300              		.section	.text.Rel_angleloop_PID_tuning,"ax",%progbits
 1301              		.align	1
 1302              		.global	Rel_angleloop_PID_tuning
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1307              	Rel_angleloop_PID_tuning:
 1308              	.LVL83:
 1309              	.LFB144:
 410:Core/Src/main.c **** 
 411:Core/Src/main.c **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã»ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½ï¿½ï¿½
 412:Core/Src/main.c **** void Rel_angleloop_PID_tuning(int motor_ID)
 413:Core/Src/main.c **** {
 1310              		.loc 1 413 1 is_stmt 1 view -0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314              		.loc 1 413 1 is_stmt 0 view .LVU283
 1315 0000 10B5     		push	{r4, lr}
 1316              	.LCFI32:
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 4, -8
 1319              		.cfi_offset 14, -4
 1320 0002 82B0     		sub	sp, sp, #8
 1321              	.LCFI33:
 1322              		.cfi_def_cfa_offset 16
 1323 0004 0446     		mov	r4, r0
 414:Core/Src/main.c ****   if(i <= 100) speed_set = 0;
 1324              		.loc 1 414 3 is_stmt 1 view .LVU284
 1325              		.loc 1 414 8 is_stmt 0 view .LVU285
 1326 0006 3D4B     		ldr	r3, .L62
 1327 0008 1B68     		ldr	r3, [r3]
 1328              		.loc 1 414 5 view .LVU286
 1329 000a 642B     		cmp	r3, #100
 1330 000c 3FDC     		bgt	.L53
 1331              		.loc 1 414 16 is_stmt 1 discriminator 1 view .LVU287
 1332              		.loc 1 414 26 is_stmt 0 discriminator 1 view .LVU288
 1333 000e 3C4A     		ldr	r2, .L62+4
 1334 0010 0021     		movs	r1, #0
 1335 0012 1160     		str	r1, [r2]
 1336              	.L54:
 415:Core/Src/main.c ****   else if(i >100 && i<=1100) speed_set = -15;
 416:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
ARM GAS  /tmp/ccf61RgB.s 			page 32


 417:Core/Src/main.c ****   if(i > 2100) i = 0;
 1337              		.loc 1 417 3 is_stmt 1 view .LVU289
 1338              		.loc 1 417 5 is_stmt 0 view .LVU290
 1339 0014 40F63402 		movw	r2, #2100
 1340 0018 9342     		cmp	r3, r2
 1341 001a 02DD     		ble	.L56
 1342              		.loc 1 417 16 is_stmt 1 discriminator 1 view .LVU291
 1343              		.loc 1 417 18 is_stmt 0 discriminator 1 view .LVU292
 1344 001c 374B     		ldr	r3, .L62
 1345 001e 0022     		movs	r2, #0
 1346 0020 1A60     		str	r2, [r3]
 1347              	.L56:
 418:Core/Src/main.c ****   //speed_set = 25;
 419:Core/Src/main.c ****   
 420:Core/Src/main.c ****   motor_pid[motor_ID].target = speed_set; 																							
 1348              		.loc 1 420 3 is_stmt 1 view .LVU293
 1349              		.loc 1 420 30 is_stmt 0 view .LVU294
 1350 0022 3848     		ldr	r0, .L62+8
 1351              	.LVL84:
 1352              		.loc 1 420 30 view .LVU295
 1353 0024 6423     		movs	r3, #100
 1354 0026 03FB0400 		mla	r0, r3, r4, r0
 1355 002a 354B     		ldr	r3, .L62+4
 1356 002c D3ED007A 		vldr.32	s15, [r3]	@ int
 1357 0030 F8EEE77A 		vcvt.f32.s32	s15, s15
 1358 0034 C0ED017A 		vstr.32	s15, [r0, #4]
 421:Core/Src/main.c ****   motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID], moto_chassis[motor_ID].speed_rpm, 0);
 1359              		.loc 1 421 3 is_stmt 1 view .LVU296
 1360              		.loc 1 421 22 is_stmt 0 view .LVU297
 1361 0038 026E     		ldr	r2, [r0, #96]
 1362              		.loc 1 421 77 view .LVU298
 1363 003a 04EB4403 		add	r3, r4, r4, lsl #1
 1364 003e 1B01     		lsls	r3, r3, #4
 1365 0040 3149     		ldr	r1, .L62+12
 1366 0042 CB5E     		ldrsh	r3, [r1, r3]
 1367 0044 00EE103A 		vmov	s0, r3	@ int
 1368              		.loc 1 421 3 view .LVU299
 1369 0048 0021     		movs	r1, #0
 1370 004a B8EEC00A 		vcvt.f32.s32	s0, s0
 1371 004e 9047     		blx	r2
 1372              	.LVL85:
 422:Core/Src/main.c ****   if(motor_ID == 0) set_moto_current(&hcan1, motor_pid[motor_ID].output, 0, 0, 0);
 1373              		.loc 1 422 3 is_stmt 1 view .LVU300
 1374              		.loc 1 422 5 is_stmt 0 view .LVU301
 1375 0050 84B3     		cbz	r4, .L60
 1376              	.L57:
 423:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1377              		.loc 1 423 3 is_stmt 1 view .LVU302
 1378              		.loc 1 423 5 is_stmt 0 view .LVU303
 1379 0052 012C     		cmp	r4, #1
 1380 0054 40D0     		beq	.L61
 1381              	.L58:
 424:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 425:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].speed_rpm);
 426:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].total_angle);
 427:Core/Src/main.c ****   printf("%f, ", (float)j);
 1382              		.loc 1 427 3 is_stmt 1 view .LVU304
ARM GAS  /tmp/ccf61RgB.s 			page 33


 1383              		.loc 1 427 18 is_stmt 0 view .LVU305
 1384 0056 2D4B     		ldr	r3, .L62+16
 1385 0058 1868     		ldr	r0, [r3]
 1386              		.loc 1 427 3 view .LVU306
 1387 005a 07EE900A 		vmov	s15, r0	@ int
 1388 005e F8EEE77A 		vcvt.f32.s32	s15, s15
 1389 0062 17EE900A 		vmov	r0, s15
 1390 0066 FFF7FEFF 		bl	__aeabi_f2d
 1391              	.LVL86:
 1392 006a 0246     		mov	r2, r0
 1393 006c 0B46     		mov	r3, r1
 1394 006e 2848     		ldr	r0, .L62+20
 1395 0070 FFF7FEFF 		bl	printf
 1396              	.LVL87:
 428:Core/Src/main.c ****   printf("%d, %d\n", speed_set, moto_chassis[motor_ID].total_angle);
 1397              		.loc 1 428 3 is_stmt 1 view .LVU307
 1398 0074 04EB4404 		add	r4, r4, r4, lsl #1
 1399              	.LVL88:
 1400              		.loc 1 428 3 is_stmt 0 view .LVU308
 1401 0078 234B     		ldr	r3, .L62+12
 1402 007a 03EB0413 		add	r3, r3, r4, lsl #4
 1403 007e 9A69     		ldr	r2, [r3, #24]
 1404 0080 1F4B     		ldr	r3, .L62+4
 1405 0082 1968     		ldr	r1, [r3]
 1406 0084 2348     		ldr	r0, .L62+24
 1407 0086 FFF7FEFF 		bl	printf
 1408              	.LVL89:
 429:Core/Src/main.c **** }
 1409              		.loc 1 429 1 view .LVU309
 1410 008a 02B0     		add	sp, sp, #8
 1411              	.LCFI34:
 1412              		.cfi_remember_state
 1413              		.cfi_def_cfa_offset 8
 1414              		@ sp needed
 1415 008c 10BD     		pop	{r4, pc}
 1416              	.LVL90:
 1417              	.L53:
 1418              	.LCFI35:
 1419              		.cfi_restore_state
 415:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1420              		.loc 1 415 8 is_stmt 1 view .LVU310
 415:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1421              		.loc 1 415 18 is_stmt 0 view .LVU311
 1422 008e A3F16502 		sub	r2, r3, #101
 415:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1423              		.loc 1 415 10 view .LVU312
 1424 0092 B2F57A7F 		cmp	r2, #1000
 1425 0096 04D2     		bcs	.L55
 415:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1426              		.loc 1 415 30 is_stmt 1 discriminator 1 view .LVU313
 415:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1427              		.loc 1 415 40 is_stmt 0 discriminator 1 view .LVU314
 1428 0098 194A     		ldr	r2, .L62+4
 1429 009a 6FF00E01 		mvn	r1, #14
 1430 009e 1160     		str	r1, [r2]
 1431 00a0 B8E7     		b	.L54
 1432              	.L55:
ARM GAS  /tmp/ccf61RgB.s 			page 34


 416:Core/Src/main.c ****   if(i > 2100) i = 0;
 1433              		.loc 1 416 8 is_stmt 1 view .LVU315
 416:Core/Src/main.c ****   if(i > 2100) i = 0;
 1434              		.loc 1 416 19 is_stmt 0 view .LVU316
 1435 00a2 A3F24D42 		subw	r2, r3, #1101
 416:Core/Src/main.c ****   if(i > 2100) i = 0;
 1436              		.loc 1 416 10 view .LVU317
 1437 00a6 B2F57A7F 		cmp	r2, #1000
 1438 00aa B3D2     		bcs	.L54
 416:Core/Src/main.c ****   if(i > 2100) i = 0;
 1439              		.loc 1 416 31 is_stmt 1 discriminator 1 view .LVU318
 416:Core/Src/main.c ****   if(i > 2100) i = 0;
 1440              		.loc 1 416 41 is_stmt 0 discriminator 1 view .LVU319
 1441 00ac 144A     		ldr	r2, .L62+4
 1442 00ae 0F21     		movs	r1, #15
 1443 00b0 1160     		str	r1, [r2]
 1444 00b2 AFE7     		b	.L54
 1445              	.LVL91:
 1446              	.L60:
 422:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1447              		.loc 1 422 21 is_stmt 1 discriminator 1 view .LVU320
 422:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1448              		.loc 1 422 65 is_stmt 0 discriminator 1 view .LVU321
 1449 00b4 134B     		ldr	r3, .L62+8
 1450 00b6 6422     		movs	r2, #100
 1451 00b8 02FB0433 		mla	r3, r2, r4, r3
 1452 00bc D3ED0C7A 		vldr.32	s15, [r3, #48]
 422:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1453              		.loc 1 422 21 discriminator 1 view .LVU322
 1454 00c0 FDEEE77A 		vcvt.s32.f32	s15, s15
 1455 00c4 0022     		movs	r2, #0
 1456 00c6 0092     		str	r2, [sp]
 1457 00c8 1346     		mov	r3, r2
 1458 00ca 17EE901A 		vmov	r1, s15	@ int
 1459 00ce 09B2     		sxth	r1, r1
 1460 00d0 1148     		ldr	r0, .L62+28
 1461 00d2 FFF7FEFF 		bl	set_moto_current
 1462              	.LVL92:
 1463 00d6 BCE7     		b	.L57
 1464              	.L61:
 423:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1465              		.loc 1 423 21 is_stmt 1 discriminator 1 view .LVU323
 423:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1466              		.loc 1 423 68 is_stmt 0 discriminator 1 view .LVU324
 1467 00d8 0A4B     		ldr	r3, .L62+8
 1468 00da 6422     		movs	r2, #100
 1469 00dc 02FB0433 		mla	r3, r2, r4, r3
 1470 00e0 D3ED0C7A 		vldr.32	s15, [r3, #48]
 423:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1471              		.loc 1 423 21 discriminator 1 view .LVU325
 1472 00e4 FDEEE77A 		vcvt.s32.f32	s15, s15
 1473 00e8 0021     		movs	r1, #0
 1474 00ea 0091     		str	r1, [sp]
 1475 00ec 0B46     		mov	r3, r1
 1476 00ee 17EE902A 		vmov	r2, s15	@ int
 1477 00f2 12B2     		sxth	r2, r2
 1478 00f4 0848     		ldr	r0, .L62+28
ARM GAS  /tmp/ccf61RgB.s 			page 35


 1479 00f6 FFF7FEFF 		bl	set_moto_current
 1480              	.LVL93:
 1481 00fa ACE7     		b	.L58
 1482              	.L63:
 1483              		.align	2
 1484              	.L62:
 1485 00fc 00000000 		.word	i
 1486 0100 00000000 		.word	speed_set
 1487 0104 00000000 		.word	motor_pid
 1488 0108 00000000 		.word	moto_chassis
 1489 010c 00000000 		.word	j
 1490 0110 00000000 		.word	.LC3
 1491 0114 00000000 		.word	.LC1
 1492 0118 00000000 		.word	hcan1
 1493              		.cfi_endproc
 1494              	.LFE144:
 1496              		.section	.text.Abs_anglelop_PID_tuning,"ax",%progbits
 1497              		.align	1
 1498              		.global	Abs_anglelop_PID_tuning
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1503              	Abs_anglelop_PID_tuning:
 1504              	.LVL94:
 1505              	.LFB145:
 430:Core/Src/main.c **** 
 431:Core/Src/main.c **** //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã»ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½ï¿½ï¿½
 432:Core/Src/main.c **** void Abs_anglelop_PID_tuning(int motor_ID)
 433:Core/Src/main.c **** {
 1506              		.loc 1 433 1 is_stmt 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		.loc 1 433 1 is_stmt 0 view .LVU327
 1511 0000 30B5     		push	{r4, r5, lr}
 1512              	.LCFI36:
 1513              		.cfi_def_cfa_offset 12
 1514              		.cfi_offset 4, -12
 1515              		.cfi_offset 5, -8
 1516              		.cfi_offset 14, -4
 1517 0002 83B0     		sub	sp, sp, #12
 1518              	.LCFI37:
 1519              		.cfi_def_cfa_offset 24
 1520 0004 0446     		mov	r4, r0
 434:Core/Src/main.c ****   //IMUï¿½ï¿½Ò»ï¿½ï¿½
 435:Core/Src/main.c ****   ABS_IMU_angle[0] = (int)((IMU_Angle[2]*8192)/360); //yaw
 1521              		.loc 1 435 3 is_stmt 1 view .LVU328
 1522              		.loc 1 435 38 is_stmt 0 view .LVU329
 1523 0006 4D4B     		ldr	r3, .L74
 1524 0008 93ED027A 		vldr.32	s14, [r3, #8]
 1525              		.loc 1 435 41 view .LVU330
 1526 000c DFED4C7A 		vldr.32	s15, .L74+4
 1527 0010 27EE277A 		vmul.f32	s14, s14, s15
 1528              		.loc 1 435 47 view .LVU331
 1529 0014 DFED4B6A 		vldr.32	s13, .L74+8
 1530 0018 C7EE267A 		vdiv.f32	s15, s14, s13
 1531              		.loc 1 435 22 view .LVU332
ARM GAS  /tmp/ccf61RgB.s 			page 36


 1532 001c FDEEE77A 		vcvt.s32.f32	s15, s15
 1533              		.loc 1 435 20 view .LVU333
 1534 0020 494D     		ldr	r5, .L74+12
 1535 0022 17EE902A 		vmov	r2, s15	@ int
 1536 0026 2A80     		strh	r2, [r5]	@ movhi
 436:Core/Src/main.c ****   ABS_IMU_angle[1] = (int)(((IMU_Angle[0]+180.0)*8192)/360); //pitch
 1537              		.loc 1 436 3 is_stmt 1 view .LVU334
 1538              		.loc 1 436 39 is_stmt 0 view .LVU335
 1539 0028 1868     		ldr	r0, [r3]	@ float
 1540              	.LVL95:
 1541              		.loc 1 436 39 view .LVU336
 1542 002a FFF7FEFF 		bl	__aeabi_f2d
 1543              	.LVL96:
 1544              		.loc 1 436 42 view .LVU337
 1545 002e 0022     		movs	r2, #0
 1546 0030 464B     		ldr	r3, .L74+16
 1547 0032 FFF7FEFF 		bl	__aeabi_dadd
 1548              	.LVL97:
 1549              		.loc 1 436 49 view .LVU338
 1550 0036 0022     		movs	r2, #0
 1551 0038 454B     		ldr	r3, .L74+20
 1552 003a FFF7FEFF 		bl	__aeabi_dmul
 1553              	.LVL98:
 1554              		.loc 1 436 55 view .LVU339
 1555 003e 0022     		movs	r2, #0
 1556 0040 444B     		ldr	r3, .L74+24
 1557 0042 FFF7FEFF 		bl	__aeabi_ddiv
 1558              	.LVL99:
 1559              		.loc 1 436 22 view .LVU340
 1560 0046 FFF7FEFF 		bl	__aeabi_d2iz
 1561              	.LVL100:
 1562              		.loc 1 436 20 view .LVU341
 1563 004a 6880     		strh	r0, [r5, #2]	@ movhi
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   if(i <= 100) speed_set = 0;
 1564              		.loc 1 438 3 is_stmt 1 view .LVU342
 1565              		.loc 1 438 8 is_stmt 0 view .LVU343
 1566 004c 424B     		ldr	r3, .L74+28
 1567 004e 1B68     		ldr	r3, [r3]
 1568              		.loc 1 438 5 view .LVU344
 1569 0050 642B     		cmp	r3, #100
 1570 0052 3CDC     		bgt	.L65
 1571              		.loc 1 438 16 is_stmt 1 discriminator 1 view .LVU345
 1572              		.loc 1 438 26 is_stmt 0 discriminator 1 view .LVU346
 1573 0054 414A     		ldr	r2, .L74+32
 1574 0056 0021     		movs	r1, #0
 1575 0058 1160     		str	r1, [r2]
 1576              	.L66:
 439:Core/Src/main.c ****   else if(i >100 && i<=1100) speed_set = -15;
 440:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 441:Core/Src/main.c ****   if(i > 2100) i = 0;
 1577              		.loc 1 441 3 is_stmt 1 view .LVU347
 1578              		.loc 1 441 5 is_stmt 0 view .LVU348
 1579 005a 40F63402 		movw	r2, #2100
 1580 005e 9342     		cmp	r3, r2
 1581 0060 02DD     		ble	.L68
 1582              		.loc 1 441 16 is_stmt 1 discriminator 1 view .LVU349
ARM GAS  /tmp/ccf61RgB.s 			page 37


 1583              		.loc 1 441 18 is_stmt 0 discriminator 1 view .LVU350
 1584 0062 3D4B     		ldr	r3, .L74+28
 1585 0064 0022     		movs	r2, #0
 1586 0066 1A60     		str	r2, [r3]
 1587              	.L68:
 442:Core/Src/main.c ****   //speed_set = 25;
 443:Core/Src/main.c ****   
 444:Core/Src/main.c ****   motor_pid[motor_ID].target = speed_set; 																							
 1588              		.loc 1 444 3 is_stmt 1 view .LVU351
 1589              		.loc 1 444 30 is_stmt 0 view .LVU352
 1590 0068 3D48     		ldr	r0, .L74+36
 1591 006a 6423     		movs	r3, #100
 1592 006c 03FB0400 		mla	r0, r3, r4, r0
 1593 0070 3A4B     		ldr	r3, .L74+32
 1594 0072 D3ED007A 		vldr.32	s15, [r3]	@ int
 1595 0076 F8EEE77A 		vcvt.f32.s32	s15, s15
 1596 007a C0ED017A 		vstr.32	s15, [r0, #4]
 445:Core/Src/main.c ****   motor_pid[motor_ID].f_cal_pid(&motor_pid[motor_ID], moto_chassis[motor_ID].speed_rpm, 0);
 1597              		.loc 1 445 3 is_stmt 1 view .LVU353
 1598              		.loc 1 445 22 is_stmt 0 view .LVU354
 1599 007e 026E     		ldr	r2, [r0, #96]
 1600              		.loc 1 445 77 view .LVU355
 1601 0080 04EB4403 		add	r3, r4, r4, lsl #1
 1602 0084 1B01     		lsls	r3, r3, #4
 1603 0086 3749     		ldr	r1, .L74+40
 1604 0088 CB5E     		ldrsh	r3, [r1, r3]
 1605 008a 00EE103A 		vmov	s0, r3	@ int
 1606              		.loc 1 445 3 view .LVU356
 1607 008e 0021     		movs	r1, #0
 1608 0090 B8EEC00A 		vcvt.f32.s32	s0, s0
 1609 0094 9047     		blx	r2
 1610              	.LVL101:
 446:Core/Src/main.c ****   if(motor_ID == 0) set_moto_current(&hcan1, motor_pid[motor_ID].output, 0, 0, 0);
 1611              		.loc 1 446 3 is_stmt 1 view .LVU357
 1612              		.loc 1 446 5 is_stmt 0 view .LVU358
 1613 0096 6CB3     		cbz	r4, .L72
 1614              	.L69:
 447:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1615              		.loc 1 447 3 is_stmt 1 view .LVU359
 1616              		.loc 1 447 5 is_stmt 0 view .LVU360
 1617 0098 012C     		cmp	r4, #1
 1618 009a 3DD0     		beq	.L73
 1619              	.L70:
 448:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 449:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].speed_rpm);
 450:Core/Src/main.c ****   //printf("%d\n", moto_chassis[0].total_angle);
 451:Core/Src/main.c ****   printf("%f, ", (float)j);
 1620              		.loc 1 451 3 is_stmt 1 view .LVU361
 1621              		.loc 1 451 18 is_stmt 0 view .LVU362
 1622 009c 324B     		ldr	r3, .L74+44
 1623 009e 1868     		ldr	r0, [r3]
 1624              		.loc 1 451 3 view .LVU363
 1625 00a0 07EE900A 		vmov	s15, r0	@ int
 1626 00a4 F8EEE77A 		vcvt.f32.s32	s15, s15
 1627 00a8 17EE900A 		vmov	r0, s15
 1628 00ac FFF7FEFF 		bl	__aeabi_f2d
 1629              	.LVL102:
ARM GAS  /tmp/ccf61RgB.s 			page 38


 1630 00b0 0246     		mov	r2, r0
 1631 00b2 0B46     		mov	r3, r1
 1632 00b4 2D48     		ldr	r0, .L74+48
 1633 00b6 FFF7FEFF 		bl	printf
 1634              	.LVL103:
 452:Core/Src/main.c ****   printf("%d, %d\n", speed_set, ABS_IMU_angle[motor_ID]);
 1635              		.loc 1 452 3 is_stmt 1 view .LVU364
 1636 00ba 234B     		ldr	r3, .L74+12
 1637 00bc 33F91420 		ldrsh	r2, [r3, r4, lsl #1]
 1638 00c0 264B     		ldr	r3, .L74+32
 1639 00c2 1968     		ldr	r1, [r3]
 1640 00c4 2A48     		ldr	r0, .L74+52
 1641 00c6 FFF7FEFF 		bl	printf
 1642              	.LVL104:
 453:Core/Src/main.c **** }
 1643              		.loc 1 453 1 is_stmt 0 view .LVU365
 1644 00ca 03B0     		add	sp, sp, #12
 1645              	.LCFI38:
 1646              		.cfi_remember_state
 1647              		.cfi_def_cfa_offset 12
 1648              		@ sp needed
 1649 00cc 30BD     		pop	{r4, r5, pc}
 1650              	.LVL105:
 1651              	.L65:
 1652              	.LCFI39:
 1653              		.cfi_restore_state
 439:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1654              		.loc 1 439 8 is_stmt 1 view .LVU366
 439:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1655              		.loc 1 439 18 is_stmt 0 view .LVU367
 1656 00ce A3F16502 		sub	r2, r3, #101
 439:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1657              		.loc 1 439 10 view .LVU368
 1658 00d2 B2F57A7F 		cmp	r2, #1000
 1659 00d6 04D2     		bcs	.L67
 439:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1660              		.loc 1 439 30 is_stmt 1 discriminator 1 view .LVU369
 439:Core/Src/main.c ****   else if(i >1100 && i<=2100) speed_set = 15;
 1661              		.loc 1 439 40 is_stmt 0 discriminator 1 view .LVU370
 1662 00d8 204A     		ldr	r2, .L74+32
 1663 00da 6FF00E01 		mvn	r1, #14
 1664 00de 1160     		str	r1, [r2]
 1665 00e0 BBE7     		b	.L66
 1666              	.L67:
 440:Core/Src/main.c ****   if(i > 2100) i = 0;
 1667              		.loc 1 440 8 is_stmt 1 view .LVU371
 440:Core/Src/main.c ****   if(i > 2100) i = 0;
 1668              		.loc 1 440 19 is_stmt 0 view .LVU372
 1669 00e2 A3F24D42 		subw	r2, r3, #1101
 440:Core/Src/main.c ****   if(i > 2100) i = 0;
 1670              		.loc 1 440 10 view .LVU373
 1671 00e6 B2F57A7F 		cmp	r2, #1000
 1672 00ea B6D2     		bcs	.L66
 440:Core/Src/main.c ****   if(i > 2100) i = 0;
 1673              		.loc 1 440 31 is_stmt 1 discriminator 1 view .LVU374
 440:Core/Src/main.c ****   if(i > 2100) i = 0;
 1674              		.loc 1 440 41 is_stmt 0 discriminator 1 view .LVU375
ARM GAS  /tmp/ccf61RgB.s 			page 39


 1675 00ec 1B4A     		ldr	r2, .L74+32
 1676 00ee 0F21     		movs	r1, #15
 1677 00f0 1160     		str	r1, [r2]
 1678 00f2 B2E7     		b	.L66
 1679              	.L72:
 446:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1680              		.loc 1 446 21 is_stmt 1 discriminator 1 view .LVU376
 446:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1681              		.loc 1 446 65 is_stmt 0 discriminator 1 view .LVU377
 1682 00f4 1A4B     		ldr	r3, .L74+36
 1683 00f6 6422     		movs	r2, #100
 1684 00f8 02FB0433 		mla	r3, r2, r4, r3
 1685 00fc D3ED0C7A 		vldr.32	s15, [r3, #48]
 446:Core/Src/main.c ****   if(motor_ID == 1) set_moto_current(&hcan1, 0, motor_pid[motor_ID].output, 0, 0);
 1686              		.loc 1 446 21 discriminator 1 view .LVU378
 1687 0100 FDEEE77A 		vcvt.s32.f32	s15, s15
 1688 0104 0022     		movs	r2, #0
 1689 0106 0092     		str	r2, [sp]
 1690 0108 1346     		mov	r3, r2
 1691 010a 17EE901A 		vmov	r1, s15	@ int
 1692 010e 09B2     		sxth	r1, r1
 1693 0110 1848     		ldr	r0, .L74+56
 1694 0112 FFF7FEFF 		bl	set_moto_current
 1695              	.LVL106:
 1696 0116 BFE7     		b	.L69
 1697              	.L73:
 447:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1698              		.loc 1 447 21 is_stmt 1 discriminator 1 view .LVU379
 447:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1699              		.loc 1 447 68 is_stmt 0 discriminator 1 view .LVU380
 1700 0118 114B     		ldr	r3, .L74+36
 1701 011a 6422     		movs	r2, #100
 1702 011c 02FB0433 		mla	r3, r2, r4, r3
 1703 0120 D3ED0C7A 		vldr.32	s15, [r3, #48]
 447:Core/Src/main.c ****   //set_moto_current(&hcan1, 0, 0, 0, 0);
 1704              		.loc 1 447 21 discriminator 1 view .LVU381
 1705 0124 FDEEE77A 		vcvt.s32.f32	s15, s15
 1706 0128 0021     		movs	r1, #0
 1707 012a 0091     		str	r1, [sp]
 1708 012c 0B46     		mov	r3, r1
 1709 012e 17EE902A 		vmov	r2, s15	@ int
 1710 0132 12B2     		sxth	r2, r2
 1711 0134 0F48     		ldr	r0, .L74+56
 1712 0136 FFF7FEFF 		bl	set_moto_current
 1713              	.LVL107:
 1714 013a AFE7     		b	.L70
 1715              	.L75:
 1716              		.align	2
 1717              	.L74:
 1718 013c 00000000 		.word	IMU_Angle
 1719 0140 00000046 		.word	1174405120
 1720 0144 0000B443 		.word	1135869952
 1721 0148 00000000 		.word	ABS_IMU_angle
 1722 014c 00806640 		.word	1080459264
 1723 0150 0000C040 		.word	1086324736
 1724 0154 00807640 		.word	1081507840
 1725 0158 00000000 		.word	i
ARM GAS  /tmp/ccf61RgB.s 			page 40


 1726 015c 00000000 		.word	speed_set
 1727 0160 00000000 		.word	motor_pid
 1728 0164 00000000 		.word	moto_chassis
 1729 0168 00000000 		.word	j
 1730 016c 00000000 		.word	.LC3
 1731 0170 00000000 		.word	.LC1
 1732 0174 00000000 		.word	hcan1
 1733              		.cfi_endproc
 1734              	.LFE145:
 1736              		.section	.text.Error_Handler,"ax",%progbits
 1737              		.align	1
 1738              		.global	Error_Handler
 1739              		.syntax unified
 1740              		.thumb
 1741              		.thumb_func
 1743              	Error_Handler:
 1744              	.LFB146:
 454:Core/Src/main.c **** 
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /* USER CODE END 4 */
 457:Core/Src/main.c **** 
 458:Core/Src/main.c **** /**
 459:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 460:Core/Src/main.c ****   * @retval None
 461:Core/Src/main.c ****   */
 462:Core/Src/main.c **** void Error_Handler(void)
 463:Core/Src/main.c **** {
 1745              		.loc 1 463 1 is_stmt 1 view -0
 1746              		.cfi_startproc
 1747              		@ Volatile: function does not return.
 1748              		@ args = 0, pretend = 0, frame = 0
 1749              		@ frame_needed = 0, uses_anonymous_args = 0
 1750              		@ link register save eliminated.
 464:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 465:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 466:Core/Src/main.c ****   __disable_irq();
 1751              		.loc 1 466 3 view .LVU383
 1752              	.LBB5:
 1753              	.LBI5:
 1754              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccf61RgB.s 			page 41


  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  /tmp/ccf61RgB.s 			page 42


  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccf61RgB.s 			page 43


 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1755              		.loc 2 140 27 view .LVU384
 1756              	.LBB6:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1757              		.loc 2 142 3 view .LVU385
 1758              		.syntax unified
 1759              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1760 0000 72B6     		cpsid i
 1761              	@ 0 "" 2
 1762              		.thumb
 1763              		.syntax unified
 1764              	.L77:
 1765              	.LBE6:
 1766              	.LBE5:
 467:Core/Src/main.c ****   while (1)
 1767              		.loc 1 467 3 view .LVU386
 468:Core/Src/main.c ****   {
 469:Core/Src/main.c ****   }
 1768              		.loc 1 469 3 view .LVU387
 467:Core/Src/main.c ****   while (1)
 1769              		.loc 1 467 9 view .LVU388
 1770 0002 FEE7     		b	.L77
 1771              		.cfi_endproc
 1772              	.LFE146:
 1774              		.section	.text.SystemClock_Config,"ax",%progbits
 1775              		.align	1
 1776              		.global	SystemClock_Config
 1777              		.syntax unified
 1778              		.thumb
 1779              		.thumb_func
 1781              	SystemClock_Config:
 1782              	.LFB135:
 213:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1783              		.loc 1 213 1 view -0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 80
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787 0000 00B5     		push	{lr}
 1788              	.LCFI40:
 1789              		.cfi_def_cfa_offset 4
 1790              		.cfi_offset 14, -4
 1791 0002 95B0     		sub	sp, sp, #84
 1792              	.LCFI41:
 1793              		.cfi_def_cfa_offset 88
 214:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1794              		.loc 1 214 3 view .LVU390
 214:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1795              		.loc 1 214 22 is_stmt 0 view .LVU391
ARM GAS  /tmp/ccf61RgB.s 			page 44


 1796 0004 3022     		movs	r2, #48
 1797 0006 0021     		movs	r1, #0
 1798 0008 08A8     		add	r0, sp, #32
 1799 000a FFF7FEFF 		bl	memset
 1800              	.LVL108:
 215:Core/Src/main.c **** 
 1801              		.loc 1 215 3 is_stmt 1 view .LVU392
 215:Core/Src/main.c **** 
 1802              		.loc 1 215 22 is_stmt 0 view .LVU393
 1803 000e 0023     		movs	r3, #0
 1804 0010 0393     		str	r3, [sp, #12]
 1805 0012 0493     		str	r3, [sp, #16]
 1806 0014 0593     		str	r3, [sp, #20]
 1807 0016 0693     		str	r3, [sp, #24]
 1808 0018 0793     		str	r3, [sp, #28]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1809              		.loc 1 219 3 is_stmt 1 view .LVU394
 1810              	.LBB7:
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1811              		.loc 1 219 3 view .LVU395
 1812 001a 0193     		str	r3, [sp, #4]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1813              		.loc 1 219 3 view .LVU396
 1814 001c 204A     		ldr	r2, .L84
 1815 001e 116C     		ldr	r1, [r2, #64]
 1816 0020 41F08051 		orr	r1, r1, #268435456
 1817 0024 1164     		str	r1, [r2, #64]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1818              		.loc 1 219 3 view .LVU397
 1819 0026 126C     		ldr	r2, [r2, #64]
 1820 0028 02F08052 		and	r2, r2, #268435456
 1821 002c 0192     		str	r2, [sp, #4]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1822              		.loc 1 219 3 view .LVU398
 1823 002e 019A     		ldr	r2, [sp, #4]
 1824              	.LBE7:
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1825              		.loc 1 219 3 view .LVU399
 220:Core/Src/main.c **** 
 1826              		.loc 1 220 3 view .LVU400
 1827              	.LBB8:
 220:Core/Src/main.c **** 
 1828              		.loc 1 220 3 view .LVU401
 1829 0030 0293     		str	r3, [sp, #8]
 220:Core/Src/main.c **** 
 1830              		.loc 1 220 3 view .LVU402
 1831 0032 1C4B     		ldr	r3, .L84+4
 1832 0034 1A68     		ldr	r2, [r3]
 1833 0036 42F48042 		orr	r2, r2, #16384
 1834 003a 1A60     		str	r2, [r3]
 220:Core/Src/main.c **** 
 1835              		.loc 1 220 3 view .LVU403
 1836 003c 1B68     		ldr	r3, [r3]
 1837 003e 03F48043 		and	r3, r3, #16384
 1838 0042 0293     		str	r3, [sp, #8]
 220:Core/Src/main.c **** 
 1839              		.loc 1 220 3 view .LVU404
ARM GAS  /tmp/ccf61RgB.s 			page 45


 1840 0044 029B     		ldr	r3, [sp, #8]
 1841              	.LBE8:
 220:Core/Src/main.c **** 
 1842              		.loc 1 220 3 view .LVU405
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1843              		.loc 1 225 3 view .LVU406
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1844              		.loc 1 225 36 is_stmt 0 view .LVU407
 1845 0046 0123     		movs	r3, #1
 1846 0048 0893     		str	r3, [sp, #32]
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1847              		.loc 1 226 3 is_stmt 1 view .LVU408
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1848              		.loc 1 226 30 is_stmt 0 view .LVU409
 1849 004a 4FF48033 		mov	r3, #65536
 1850 004e 0993     		str	r3, [sp, #36]
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1851              		.loc 1 227 3 is_stmt 1 view .LVU410
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1852              		.loc 1 227 34 is_stmt 0 view .LVU411
 1853 0050 0223     		movs	r3, #2
 1854 0052 0E93     		str	r3, [sp, #56]
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 1855              		.loc 1 228 3 is_stmt 1 view .LVU412
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 1856              		.loc 1 228 35 is_stmt 0 view .LVU413
 1857 0054 4FF48002 		mov	r2, #4194304
 1858 0058 0F92     		str	r2, [sp, #60]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 1859              		.loc 1 229 3 is_stmt 1 view .LVU414
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 1860              		.loc 1 229 30 is_stmt 0 view .LVU415
 1861 005a 0622     		movs	r2, #6
 1862 005c 1092     		str	r2, [sp, #64]
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1863              		.loc 1 230 3 is_stmt 1 view .LVU416
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1864              		.loc 1 230 30 is_stmt 0 view .LVU417
 1865 005e A822     		movs	r2, #168
 1866 0060 1192     		str	r2, [sp, #68]
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 1867              		.loc 1 231 3 is_stmt 1 view .LVU418
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 1868              		.loc 1 231 30 is_stmt 0 view .LVU419
 1869 0062 1293     		str	r3, [sp, #72]
 232:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1870              		.loc 1 232 3 is_stmt 1 view .LVU420
 232:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1871              		.loc 1 232 30 is_stmt 0 view .LVU421
 1872 0064 0723     		movs	r3, #7
 1873 0066 1393     		str	r3, [sp, #76]
 233:Core/Src/main.c ****   {
 1874              		.loc 1 233 3 is_stmt 1 view .LVU422
 233:Core/Src/main.c ****   {
 1875              		.loc 1 233 7 is_stmt 0 view .LVU423
 1876 0068 08A8     		add	r0, sp, #32
 1877 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccf61RgB.s 			page 46


 1878              	.LVL109:
 233:Core/Src/main.c ****   {
 1879              		.loc 1 233 6 discriminator 1 view .LVU424
 1880 006e 98B9     		cbnz	r0, .L82
 240:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1881              		.loc 1 240 3 is_stmt 1 view .LVU425
 240:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1882              		.loc 1 240 31 is_stmt 0 view .LVU426
 1883 0070 0F23     		movs	r3, #15
 1884 0072 0393     		str	r3, [sp, #12]
 242:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1885              		.loc 1 242 3 is_stmt 1 view .LVU427
 242:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1886              		.loc 1 242 34 is_stmt 0 view .LVU428
 1887 0074 0223     		movs	r3, #2
 1888 0076 0493     		str	r3, [sp, #16]
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1889              		.loc 1 243 3 is_stmt 1 view .LVU429
 243:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1890              		.loc 1 243 35 is_stmt 0 view .LVU430
 1891 0078 0023     		movs	r3, #0
 1892 007a 0593     		str	r3, [sp, #20]
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1893              		.loc 1 244 3 is_stmt 1 view .LVU431
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1894              		.loc 1 244 36 is_stmt 0 view .LVU432
 1895 007c 4FF4A053 		mov	r3, #5120
 1896 0080 0693     		str	r3, [sp, #24]
 245:Core/Src/main.c **** 
 1897              		.loc 1 245 3 is_stmt 1 view .LVU433
 245:Core/Src/main.c **** 
 1898              		.loc 1 245 36 is_stmt 0 view .LVU434
 1899 0082 4FF48053 		mov	r3, #4096
 1900 0086 0793     		str	r3, [sp, #28]
 247:Core/Src/main.c ****   {
 1901              		.loc 1 247 3 is_stmt 1 view .LVU435
 247:Core/Src/main.c ****   {
 1902              		.loc 1 247 7 is_stmt 0 view .LVU436
 1903 0088 0521     		movs	r1, #5
 1904 008a 03A8     		add	r0, sp, #12
 1905 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1906              	.LVL110:
 247:Core/Src/main.c ****   {
 1907              		.loc 1 247 6 discriminator 1 view .LVU437
 1908 0090 20B9     		cbnz	r0, .L83
 251:Core/Src/main.c **** 
 1909              		.loc 1 251 1 view .LVU438
 1910 0092 15B0     		add	sp, sp, #84
 1911              	.LCFI42:
 1912              		.cfi_remember_state
 1913              		.cfi_def_cfa_offset 4
 1914              		@ sp needed
 1915 0094 5DF804FB 		ldr	pc, [sp], #4
 1916              	.L82:
 1917              	.LCFI43:
 1918              		.cfi_restore_state
 235:Core/Src/main.c ****   }
ARM GAS  /tmp/ccf61RgB.s 			page 47


 1919              		.loc 1 235 5 is_stmt 1 view .LVU439
 1920 0098 FFF7FEFF 		bl	Error_Handler
 1921              	.LVL111:
 1922              	.L83:
 249:Core/Src/main.c ****   }
 1923              		.loc 1 249 5 view .LVU440
 1924 009c FFF7FEFF 		bl	Error_Handler
 1925              	.LVL112:
 1926              	.L85:
 1927              		.align	2
 1928              	.L84:
 1929 00a0 00380240 		.word	1073887232
 1930 00a4 00700040 		.word	1073770496
 1931              		.cfi_endproc
 1932              	.LFE135:
 1934              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1935              		.align	2
 1936              	.LC5:
 1937 0000 2D2D2D2D 		.ascii	"--------------init--------------\000"
 1937      2D2D2D2D 
 1937      2D2D2D2D 
 1937      2D2D696E 
 1937      69742D2D 
 1938              		.section	.text.main,"ax",%progbits
 1939              		.align	1
 1940              		.global	main
 1941              		.syntax unified
 1942              		.thumb
 1943              		.thumb_func
 1945              	main:
 1946              	.LFB134:
 100:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1947              		.loc 1 100 1 view -0
 1948              		.cfi_startproc
 1949              		@ Volatile: function does not return.
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952 0000 2DE98048 		push	{r7, fp, lr}
 1953              	.LCFI44:
 1954              		.cfi_def_cfa_offset 12
 1955              		.cfi_offset 7, -12
 1956              		.cfi_offset 11, -8
 1957              		.cfi_offset 14, -4
 1958 0004 85B0     		sub	sp, sp, #20
 1959              	.LCFI45:
 1960              		.cfi_def_cfa_offset 32
 107:Core/Src/main.c **** 
 1961              		.loc 1 107 3 view .LVU442
 1962 0006 FFF7FEFF 		bl	HAL_Init
 1963              	.LVL113:
 114:Core/Src/main.c **** 
 1964              		.loc 1 114 3 view .LVU443
 1965 000a FFF7FEFF 		bl	SystemClock_Config
 1966              	.LVL114:
 121:Core/Src/main.c ****   MX_CAN1_Init();
 1967              		.loc 1 121 3 view .LVU444
 1968 000e FFF7FEFF 		bl	MX_GPIO_Init
ARM GAS  /tmp/ccf61RgB.s 			page 48


 1969              	.LVL115:
 122:Core/Src/main.c ****   MX_I2C2_Init();
 1970              		.loc 1 122 3 view .LVU445
 1971 0012 FFF7FEFF 		bl	MX_CAN1_Init
 1972              	.LVL116:
 123:Core/Src/main.c ****   MX_USART1_UART_Init();
 1973              		.loc 1 123 3 view .LVU446
 1974 0016 FFF7FEFF 		bl	MX_I2C2_Init
 1975              	.LVL117:
 124:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 1976              		.loc 1 124 3 view .LVU447
 1977 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 1978              	.LVL118:
 125:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1979              		.loc 1 125 3 view .LVU448
 1980 001e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 1981              	.LVL119:
 128:Core/Src/main.c **** 	my_can_filter_init_recv_all(&hcan1);
 1982              		.loc 1 128 2 view .LVU449
 1983 0022 5C4C     		ldr	r4, .L89
 1984 0024 2046     		mov	r0, r4
 1985 0026 FFF7FEFF 		bl	HAL_CAN_Start
 1986              	.LVL120:
 129:Core/Src/main.c **** 	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // enable IT
 1987              		.loc 1 129 2 view .LVU450
 1988 002a 2046     		mov	r0, r4
 1989 002c FFF7FEFF 		bl	my_can_filter_init_recv_all
 1990              	.LVL121:
 130:Core/Src/main.c **** 	
 1991              		.loc 1 130 2 view .LVU451
 1992 0030 0221     		movs	r1, #2
 1993 0032 2046     		mov	r0, r4
 1994 0034 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1995              	.LVL122:
 139:Core/Src/main.c ****   motor_pid[0].f_param_init(&motor_pid[0],PID_Speed,current_limit,5000,0,0,0,8000,61.4656753,0.6697
 1996              		.loc 1 139 3 view .LVU452
 1997 0038 574E     		ldr	r6, .L89+4
 1998 003a 3046     		mov	r0, r6
 1999 003c FFF7FEFF 		bl	pid_init
 2000              	.LVL123:
 140:Core/Src/main.c ****   pid_init(&angle_pid[0]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 2001              		.loc 1 140 3 view .LVU453
 140:Core/Src/main.c ****   pid_init(&angle_pid[0]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 2002              		.loc 1 140 15 is_stmt 0 view .LVU454
 2003 0040 B56D     		ldr	r5, [r6, #88]
 140:Core/Src/main.c ****   pid_init(&angle_pid[0]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 2004              		.loc 1 140 3 view .LVU455
 2005 0042 9FED568A 		vldr.32	s16, .L89+8
 2006 0046 4FF4FA58 		mov	r8, #8000
 2007 004a CDF80880 		str	r8, [sp, #8]
 2008 004e 0024     		movs	r4, #0
 2009 0050 0194     		str	r4, [sp, #4]
 2010 0052 0094     		str	r4, [sp]
 2011 0054 F0EE481A 		vmov.f32	s3, s16
 2012 0058 9FED511A 		vldr.32	s2, .L89+12
 2013 005c DFED510A 		vldr.32	s1, .L89+16
 2014 0060 B0EE480A 		vmov.f32	s0, s16
ARM GAS  /tmp/ccf61RgB.s 			page 49


 2015 0064 41F28833 		movw	r3, #5000
 2016 0068 4F4A     		ldr	r2, .L89+20
 2017 006a 1288     		ldrh	r2, [r2]
 2018 006c 0121     		movs	r1, #1
 2019 006e 3046     		mov	r0, r6
 2020 0070 A847     		blx	r5
 2021              	.LVL124:
 141:Core/Src/main.c ****   angle_pid[0].f_param_init(&angle_pid[0],PID_Speed,300,300,0,0,4000,0,1.3713,0.00495369,94.8474*0)
 2022              		.loc 1 141 3 is_stmt 1 view .LVU456
 2023 0072 4E4D     		ldr	r5, .L89+24
 2024 0074 2846     		mov	r0, r5
 2025 0076 FFF7FEFF 		bl	pid_init
 2026              	.LVL125:
 142:Core/Src/main.c ****   pid_init(&abs_pid[0]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È£ï¿½
 2027              		.loc 1 142 3 view .LVU457
 2028 007a 0294     		str	r4, [sp, #8]
 2029 007c 4FF47A69 		mov	r9, #4000
 2030 0080 CDF80490 		str	r9, [sp, #4]
 2031 0084 0094     		str	r4, [sp]
 2032 0086 F0EE481A 		vmov.f32	s3, s16
 2033 008a 9FED491A 		vldr.32	s2, .L89+28
 2034 008e DFED490A 		vldr.32	s1, .L89+32
 2035 0092 B0EE480A 		vmov.f32	s0, s16
 2036 0096 4FF49673 		mov	r3, #300
 2037 009a 1A46     		mov	r2, r3
 2038 009c 0121     		movs	r1, #1
 2039 009e 2846     		mov	r0, r5
 2040 00a0 AF6D     		ldr	r7, [r5, #88]
 2041 00a2 B847     		blx	r7
 2042              	.LVL126:
 143:Core/Src/main.c ****   abs_pid[0].f_param_init(&abs_pid[0],PID_Speed,300,300,0,0,4000,0,-0.9,-0.003,-3);
 2043              		.loc 1 143 3 view .LVU458
 2044 00a4 DFF840A1 		ldr	r10, .L89+84
 2045 00a8 5046     		mov	r0, r10
 2046 00aa FFF7FEFF 		bl	pid_init
 2047              	.LVL127:
 144:Core/Src/main.c **** 
 2048              		.loc 1 144 3 view .LVU459
 2049 00ae 0294     		str	r4, [sp, #8]
 2050 00b0 CDF80490 		str	r9, [sp, #4]
 2051 00b4 0094     		str	r4, [sp]
 2052 00b6 F8EE081A 		vmov.f32	s3, #-3.0e+0
 2053 00ba 9FED3F1A 		vldr.32	s2, .L89+36
 2054 00be DFED3F0A 		vldr.32	s1, .L89+40
 2055 00c2 B0EE480A 		vmov.f32	s0, s16
 2056 00c6 4FF49673 		mov	r3, #300
 2057 00ca 1A46     		mov	r2, r3
 2058 00cc 0121     		movs	r1, #1
 2059 00ce 5046     		mov	r0, r10
 2060 00d0 DAF85870 		ldr	r7, [r10, #88]
 2061 00d4 B847     		blx	r7
 2062              	.LVL128:
 147:Core/Src/main.c ****   motor_pid[1].f_param_init(&motor_pid[1],PID_Speed,current_limit,5000,0,0,0,8000,4.01239768,3.0348
 2063              		.loc 1 147 3 view .LVU460
 2064 00d6 06F1640B 		add	fp, r6, #100
 2065 00da 5846     		mov	r0, fp
 2066 00dc FFF7FEFF 		bl	pid_init
ARM GAS  /tmp/ccf61RgB.s 			page 50


 2067              	.LVL129:
 148:Core/Src/main.c ****   pid_init(&angle_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 2068              		.loc 1 148 3 view .LVU461
 148:Core/Src/main.c ****   pid_init(&angle_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 2069              		.loc 1 148 15 is_stmt 0 view .LVU462
 2070 00e0 D6F8BC60 		ldr	r6, [r6, #188]
 148:Core/Src/main.c ****   pid_init(&angle_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½Ã£ï¿½
 2071              		.loc 1 148 3 view .LVU463
 2072 00e4 CDF80880 		str	r8, [sp, #8]
 2073 00e8 0194     		str	r4, [sp, #4]
 2074 00ea 0094     		str	r4, [sp]
 2075 00ec F0EE481A 		vmov.f32	s3, s16
 2076 00f0 9FED331A 		vldr.32	s2, .L89+44
 2077 00f4 DFED330A 		vldr.32	s1, .L89+48
 2078 00f8 B0EE480A 		vmov.f32	s0, s16
 2079 00fc 41F28833 		movw	r3, #5000
 2080 0100 294A     		ldr	r2, .L89+20
 2081 0102 1288     		ldrh	r2, [r2]
 2082 0104 0121     		movs	r1, #1
 2083 0106 5846     		mov	r0, fp
 2084 0108 B047     		blx	r6
 2085              	.LVL130:
 149:Core/Src/main.c ****   angle_pid[1].f_param_init(&angle_pid[1],PID_Speed,500,500,0,0,4000,0,1.27137,0.01084,27.877753*0.
 2086              		.loc 1 149 3 is_stmt 1 view .LVU464
 2087 010a 05F16406 		add	r6, r5, #100
 2088 010e 3046     		mov	r0, r6
 2089 0110 FFF7FEFF 		bl	pid_init
 2090              	.LVL131:
 150:Core/Src/main.c ****   pid_init(&abs_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È£ï¿½
 2091              		.loc 1 150 3 view .LVU465
 150:Core/Src/main.c ****   pid_init(&abs_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È£ï¿½
 2092              		.loc 1 150 15 is_stmt 0 view .LVU466
 2093 0114 D5F8BC50 		ldr	r5, [r5, #188]
 150:Core/Src/main.c ****   pid_init(&abs_pid[1]); //Î»ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È£ï¿½
 2094              		.loc 1 150 3 view .LVU467
 2095 0118 0294     		str	r4, [sp, #8]
 2096 011a CDF80490 		str	r9, [sp, #4]
 2097 011e 0094     		str	r4, [sp]
 2098 0120 DFED291A 		vldr.32	s3, .L89+52
 2099 0124 9FED291A 		vldr.32	s2, .L89+56
 2100 0128 DFED290A 		vldr.32	s1, .L89+60
 2101 012c B0EE480A 		vmov.f32	s0, s16
 2102 0130 4FF4FA73 		mov	r3, #500
 2103 0134 1A46     		mov	r2, r3
 2104 0136 0121     		movs	r1, #1
 2105 0138 3046     		mov	r0, r6
 2106 013a A847     		blx	r5
 2107              	.LVL132:
 151:Core/Src/main.c ****   abs_pid[1].f_param_init(&abs_pid[1],PID_Speed,300,300,0,0,4000,0,0.5,0,10);
 2108              		.loc 1 151 3 is_stmt 1 view .LVU468
 2109 013c 0AF16405 		add	r5, r10, #100
 2110 0140 2846     		mov	r0, r5
 2111 0142 FFF7FEFF 		bl	pid_init
 2112              	.LVL133:
 152:Core/Src/main.c **** 
 2113              		.loc 1 152 3 view .LVU469
 152:Core/Src/main.c **** 
ARM GAS  /tmp/ccf61RgB.s 			page 51


 2114              		.loc 1 152 13 is_stmt 0 view .LVU470
 2115 0146 DAF8BC60 		ldr	r6, [r10, #188]
 152:Core/Src/main.c **** 
 2116              		.loc 1 152 3 view .LVU471
 2117 014a 0294     		str	r4, [sp, #8]
 2118 014c CDF80490 		str	r9, [sp, #4]
 2119 0150 0094     		str	r4, [sp]
 2120 0152 F2EE041A 		vmov.f32	s3, #1.0e+1
 2121 0156 B0EE481A 		vmov.f32	s2, s16
 2122 015a F6EE000A 		vmov.f32	s1, #5.0e-1
 2123 015e B0EE480A 		vmov.f32	s0, s16
 2124 0162 4FF49673 		mov	r3, #300
 2125 0166 1A46     		mov	r2, r3
 2126 0168 0121     		movs	r1, #1
 2127 016a 2846     		mov	r0, r5
 2128 016c B047     		blx	r6
 2129              	.LVL134:
 156:Core/Src/main.c ****   HAL_I2C_Slave_Receive_IT(&hi2c2,ReceiveBuffer,sizeof(ReceiveBuffer));
 2130              		.loc 1 156 3 is_stmt 1 view .LVU472
 2131 016e 1948     		ldr	r0, .L89+64
 2132 0170 FFF7FEFF 		bl	puts
 2133              	.LVL135:
 157:Core/Src/main.c ****   while (1)
 2134              		.loc 1 157 3 view .LVU473
 2135 0174 0622     		movs	r2, #6
 2136 0176 1849     		ldr	r1, .L89+68
 2137 0178 1848     		ldr	r0, .L89+72
 2138 017a FFF7FEFF 		bl	HAL_I2C_Slave_Receive_IT
 2139              	.LVL136:
 2140              	.L87:
 158:Core/Src/main.c ****   {
 2141              		.loc 1 158 3 view .LVU474
 164:Core/Src/main.c ****     {
 2142              		.loc 1 164 5 view .LVU475
 187:Core/Src/main.c ****       break;
 2143              		.loc 1 187 9 view .LVU476
 2144 017e FFF7FEFF 		bl	Abs_angle_control_loop
 2145              	.LVL137:
 188:Core/Src/main.c ****     
 2146              		.loc 1 188 7 view .LVU477
 197:Core/Src/main.c ****     {
 2147              		.loc 1 197 5 view .LVU478
 202:Core/Src/main.c ****     j++;
 2148              		.loc 1 202 5 view .LVU479
 202:Core/Src/main.c ****     j++;
 2149              		.loc 1 202 6 is_stmt 0 view .LVU480
 2150 0182 174A     		ldr	r2, .L89+76
 2151 0184 1368     		ldr	r3, [r2]
 2152 0186 0133     		adds	r3, r3, #1
 2153 0188 1360     		str	r3, [r2]
 203:Core/Src/main.c ****   }
 2154              		.loc 1 203 5 is_stmt 1 view .LVU481
 203:Core/Src/main.c ****   }
 2155              		.loc 1 203 6 is_stmt 0 view .LVU482
 2156 018a 164A     		ldr	r2, .L89+80
 2157 018c 1368     		ldr	r3, [r2]
 2158 018e 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccf61RgB.s 			page 52


 2159 0190 1360     		str	r3, [r2]
 158:Core/Src/main.c ****   {
 2160              		.loc 1 158 9 is_stmt 1 view .LVU483
 2161 0192 F4E7     		b	.L87
 2162              	.L90:
 2163              		.align	2
 2164              	.L89:
 2165 0194 00000000 		.word	hcan1
 2166 0198 00000000 		.word	motor_pid
 2167 019c 00000000 		.word	0
 2168 01a0 1B742B3F 		.word	1059812379
 2169 01a4 DADC7542 		.word	1115020506
 2170 01a8 00000000 		.word	current_limit
 2171 01ac 00000000 		.word	angle_pid
 2172 01b0 9052A23B 		.word	1000493712
 2173 01b4 C286AF3F 		.word	1068467906
 2174 01b8 A69B44BB 		.word	-1153131610
 2175 01bc 666666BF 		.word	-1083808154
 2176 01c0 FD3A4240 		.word	1078082301
 2177 01c4 90658040 		.word	1082156432
 2178 01c8 E96A3241 		.word	1093823209
 2179 01cc 419A313C 		.word	1009883713
 2180 01d0 41BCA23F 		.word	1067629633
 2181 01d4 00000000 		.word	.LC5
 2182 01d8 00000000 		.word	ReceiveBuffer
 2183 01dc 00000000 		.word	hi2c2
 2184 01e0 00000000 		.word	i
 2185 01e4 00000000 		.word	j
 2186 01e8 00000000 		.word	abs_pid
 2187              		.cfi_endproc
 2188              	.LFE134:
 2190              		.global	speed_set
 2191              		.section	.bss.speed_set,"aw",%nobits
 2192              		.align	2
 2195              	speed_set:
 2196 0000 00000000 		.space	4
 2197              		.global	time
 2198              		.section	.bss.time,"aw",%nobits
 2199              		.align	2
 2202              	time:
 2203 0000 00000000 		.space	4
 2204              		.global	speed
 2205              		.section	.bss.speed,"aw",%nobits
 2206              		.align	2
 2209              	speed:
 2210 0000 00000000 		.space	4
 2211              		.global	current
 2212              		.section	.bss.current,"aw",%nobits
 2213              		.align	2
 2216              	current:
 2217 0000 00000000 		.space	4
 2218              		.global	j
 2219              		.section	.bss.j,"aw",%nobits
 2220              		.align	2
 2223              	j:
 2224 0000 00000000 		.space	4
 2225              		.global	i
ARM GAS  /tmp/ccf61RgB.s 			page 53


 2226              		.section	.bss.i,"aw",%nobits
 2227              		.align	2
 2230              	i:
 2231 0000 00000000 		.space	4
 2232              		.global	current_limit
 2233              		.section	.data.current_limit,"aw"
 2234              		.align	2
 2237              	current_limit:
 2238 0000 D0070000 		.word	2000
 2239              		.global	Gimbal_angle
 2240              		.section	.data.Gimbal_angle,"aw"
 2241              		.align	2
 2244              	Gimbal_angle:
 2245 0000 4C1D     		.short	7500
 2246 0002 C012     		.short	4800
 2247              		.global	IMU_Angle
 2248              		.section	.bss.IMU_Angle,"aw",%nobits
 2249              		.align	2
 2252              	IMU_Angle:
 2253 0000 00000000 		.space	12
 2253      00000000 
 2253      00000000 
 2254              		.global	IMU_Angle_Raw
 2255              		.section	.bss.IMU_Angle_Raw,"aw",%nobits
 2256              		.align	2
 2259              	IMU_Angle_Raw:
 2260 0000 00000000 		.space	6
 2260      0000
 2261              		.global	ABS_IMU_angle
 2262              		.section	.bss.ABS_IMU_angle,"aw",%nobits
 2263              		.align	2
 2266              	ABS_IMU_angle:
 2267 0000 00000000 		.space	4
 2268              		.global	ABS_Gimbal_angle
 2269              		.section	.bss.ABS_Gimbal_angle,"aw",%nobits
 2270              		.align	2
 2273              	ABS_Gimbal_angle:
 2274 0000 00000000 		.space	8
 2274      00000000 
 2275              		.global	abs_pid
 2276              		.section	.bss.abs_pid,"aw",%nobits
 2277              		.align	2
 2280              	abs_pid:
 2281 0000 00000000 		.space	200
 2281      00000000 
 2281      00000000 
 2281      00000000 
 2281      00000000 
 2282              		.global	ReceiveBuffer
 2283              		.section	.bss.ReceiveBuffer,"aw",%nobits
 2284              		.align	2
 2287              	ReceiveBuffer:
 2288 0000 00000000 		.space	6
 2288      0000
 2289              		.global	angle_pid
 2290              		.section	.bss.angle_pid,"aw",%nobits
 2291              		.align	2
ARM GAS  /tmp/ccf61RgB.s 			page 54


 2294              	angle_pid:
 2295 0000 00000000 		.space	200
 2295      00000000 
 2295      00000000 
 2295      00000000 
 2295      00000000 
 2296              		.global	motor_pid
 2297              		.section	.bss.motor_pid,"aw",%nobits
 2298              		.align	2
 2301              	motor_pid:
 2302 0000 00000000 		.space	400
 2302      00000000 
 2302      00000000 
 2302      00000000 
 2302      00000000 
 2303              		.text
 2304              	.Letext0:
 2305              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2306              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2307              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 2308              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2309              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2310              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2311              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2312              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2313              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 2314              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2315              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2316              		.file 14 "Core/Inc/can.h"
 2317              		.file 15 "Core/Inc/i2c.h"
 2318              		.file 16 "Core/Inc/usart.h"
 2319              		.file 17 "/usr/lib/gcc/arm-none-eabi/13.2.0/include/stddef.h"
 2320              		.file 18 "/usr/arm-none-eabi/include/sys/_types.h"
 2321              		.file 19 "/usr/arm-none-eabi/include/sys/reent.h"
 2322              		.file 20 "/usr/arm-none-eabi/include/sys/lock.h"
 2323              		.file 21 "/usr/arm-none-eabi/include/stdio.h"
 2324              		.file 22 "Core/Inc/mytype.h"
 2325              		.file 23 "Core/Inc/bsp_can.h"
 2326              		.file 24 "Core/Inc/pid.h"
 2327              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2328              		.file 26 "USB_DEVICE/App/usb_device.h"
 2329              		.file 27 "Core/Inc/gpio.h"
 2330              		.file 28 "<built-in>"
ARM GAS  /tmp/ccf61RgB.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccf61RgB.s:21     .text.fputc:00000000 $t
     /tmp/ccf61RgB.s:27     .text.fputc:00000000 fputc
     /tmp/ccf61RgB.s:65     .text.fputc:0000001c $d
     /tmp/ccf61RgB.s:70     .text.fgetc:00000000 $t
     /tmp/ccf61RgB.s:76     .text.fgetc:00000000 fgetc
     /tmp/ccf61RgB.s:115    .text.fgetc:00000024 $d
     /tmp/ccf61RgB.s:121    .rodata.HAL_I2C_SlaveRxCpltCallback.str1.4:00000000 $d
     /tmp/ccf61RgB.s:125    .text.HAL_I2C_SlaveRxCpltCallback:00000000 $t
     /tmp/ccf61RgB.s:131    .text.HAL_I2C_SlaveRxCpltCallback:00000000 HAL_I2C_SlaveRxCpltCallback
     /tmp/ccf61RgB.s:282    .text.HAL_I2C_SlaveRxCpltCallback:000000d4 $d
     /tmp/ccf61RgB.s:2287   .bss.ReceiveBuffer:00000000 ReceiveBuffer
     /tmp/ccf61RgB.s:2259   .bss.IMU_Angle_Raw:00000000 IMU_Angle_Raw
     /tmp/ccf61RgB.s:2252   .bss.IMU_Angle:00000000 IMU_Angle
     /tmp/ccf61RgB.s:296    .rodata.Abs_angle_control_loop.str1.4:00000000 $d
     /tmp/ccf61RgB.s:300    .text.Abs_angle_control_loop:00000000 $t
     /tmp/ccf61RgB.s:306    .text.Abs_angle_control_loop:00000000 Abs_angle_control_loop
     /tmp/ccf61RgB.s:475    .text.Abs_angle_control_loop:00000104 $d
     /tmp/ccf61RgB.s:2266   .bss.ABS_IMU_angle:00000000 ABS_IMU_angle
     /tmp/ccf61RgB.s:2280   .bss.abs_pid:00000000 abs_pid
     /tmp/ccf61RgB.s:2301   .bss.motor_pid:00000000 motor_pid
     /tmp/ccf61RgB.s:2273   .bss.ABS_Gimbal_angle:00000000 ABS_Gimbal_angle
     /tmp/ccf61RgB.s:492    .rodata.Rel_angle_control_loop.str1.4:00000000 $d
     /tmp/ccf61RgB.s:496    .text.Rel_angle_control_loop:00000000 $t
     /tmp/ccf61RgB.s:502    .text.Rel_angle_control_loop:00000000 Rel_angle_control_loop
     /tmp/ccf61RgB.s:711    .text.Rel_angle_control_loop:00000138 $d
     /tmp/ccf61RgB.s:2230   .bss.i:00000000 i
     /tmp/ccf61RgB.s:2244   .data.Gimbal_angle:00000000 Gimbal_angle
     /tmp/ccf61RgB.s:2294   .bss.angle_pid:00000000 angle_pid
     /tmp/ccf61RgB.s:727    .text.Abs_angle_PID_test_loop:00000000 $t
     /tmp/ccf61RgB.s:733    .text.Abs_angle_PID_test_loop:00000000 Abs_angle_PID_test_loop
     /tmp/ccf61RgB.s:911    .text.Abs_angle_PID_test_loop:00000100 $d
     /tmp/ccf61RgB.s:927    .rodata.Rel_angle_PID_test_loop.str1.4:00000000 $d
     /tmp/ccf61RgB.s:934    .text.Rel_angle_PID_test_loop:00000000 $t
     /tmp/ccf61RgB.s:940    .text.Rel_angle_PID_test_loop:00000000 Rel_angle_PID_test_loop
     /tmp/ccf61RgB.s:1136   .text.Rel_angle_PID_test_loop:00000130 $d
     /tmp/ccf61RgB.s:2223   .bss.j:00000000 j
     /tmp/ccf61RgB.s:2195   .bss.speed_set:00000000 speed_set
     /tmp/ccf61RgB.s:1150   .text.speed_loop_PID_tuning:00000000 $t
     /tmp/ccf61RgB.s:1156   .text.speed_loop_PID_tuning:00000000 speed_loop_PID_tuning
     /tmp/ccf61RgB.s:1288   .text.speed_loop_PID_tuning:000000a0 $d
     /tmp/ccf61RgB.s:2209   .bss.speed:00000000 speed
     /tmp/ccf61RgB.s:2202   .bss.time:00000000 time
     /tmp/ccf61RgB.s:2216   .bss.current:00000000 current
     /tmp/ccf61RgB.s:1301   .text.Rel_angleloop_PID_tuning:00000000 $t
     /tmp/ccf61RgB.s:1307   .text.Rel_angleloop_PID_tuning:00000000 Rel_angleloop_PID_tuning
     /tmp/ccf61RgB.s:1485   .text.Rel_angleloop_PID_tuning:000000fc $d
     /tmp/ccf61RgB.s:1497   .text.Abs_anglelop_PID_tuning:00000000 $t
     /tmp/ccf61RgB.s:1503   .text.Abs_anglelop_PID_tuning:00000000 Abs_anglelop_PID_tuning
     /tmp/ccf61RgB.s:1718   .text.Abs_anglelop_PID_tuning:0000013c $d
     /tmp/ccf61RgB.s:1737   .text.Error_Handler:00000000 $t
     /tmp/ccf61RgB.s:1743   .text.Error_Handler:00000000 Error_Handler
     /tmp/ccf61RgB.s:1775   .text.SystemClock_Config:00000000 $t
     /tmp/ccf61RgB.s:1781   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccf61RgB.s:1929   .text.SystemClock_Config:000000a0 $d
     /tmp/ccf61RgB.s:1935   .rodata.main.str1.4:00000000 $d
ARM GAS  /tmp/ccf61RgB.s 			page 56


     /tmp/ccf61RgB.s:1939   .text.main:00000000 $t
     /tmp/ccf61RgB.s:1945   .text.main:00000000 main
     /tmp/ccf61RgB.s:2165   .text.main:00000194 $d
     /tmp/ccf61RgB.s:2237   .data.current_limit:00000000 current_limit
     /tmp/ccf61RgB.s:2192   .bss.speed_set:00000000 $d
     /tmp/ccf61RgB.s:2199   .bss.time:00000000 $d
     /tmp/ccf61RgB.s:2206   .bss.speed:00000000 $d
     /tmp/ccf61RgB.s:2213   .bss.current:00000000 $d
     /tmp/ccf61RgB.s:2220   .bss.j:00000000 $d
     /tmp/ccf61RgB.s:2227   .bss.i:00000000 $d
     /tmp/ccf61RgB.s:2234   .data.current_limit:00000000 $d
     /tmp/ccf61RgB.s:2241   .data.Gimbal_angle:00000000 $d
     /tmp/ccf61RgB.s:2249   .bss.IMU_Angle:00000000 $d
     /tmp/ccf61RgB.s:2256   .bss.IMU_Angle_Raw:00000000 $d
     /tmp/ccf61RgB.s:2263   .bss.ABS_IMU_angle:00000000 $d
     /tmp/ccf61RgB.s:2270   .bss.ABS_Gimbal_angle:00000000 $d
     /tmp/ccf61RgB.s:2277   .bss.abs_pid:00000000 $d
     /tmp/ccf61RgB.s:2284   .bss.ReceiveBuffer:00000000 $d
     /tmp/ccf61RgB.s:2291   .bss.angle_pid:00000000 $d
     /tmp/ccf61RgB.s:2298   .bss.motor_pid:00000000 $d

UNDEFINED SYMBOLS
HAL_UART_Transmit
huart1
HAL_UART_Receive
__aeabi_f2d
printf
HAL_I2C_Slave_Receive_IT
hi2c2
__aeabi_dadd
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2iz
set_moto_current
HAL_Delay
moto_chassis
hcan1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_CAN1_Init
MX_I2C2_Init
MX_USART1_UART_Init
MX_USB_DEVICE_Init
HAL_CAN_Start
my_can_filter_init_recv_all
HAL_CAN_ActivateNotification
pid_init
puts
